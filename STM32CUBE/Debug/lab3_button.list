
lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003134  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003264  08003264  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003264  08003264  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800326c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000088  080032f4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080032f4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5b5  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3f  00000000  00000000  0002a666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f28  00000000  00000000  0002d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d92c  00000000  00000000  000448e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b79  00000000  00000000  00052214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  000d4de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003228 	.word	0x08003228

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003228 	.word	0x08003228

0800014c <is_button1_pressed>:
int button2_flag = 0;
int button3_flag = 0;


int is_button1_pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_button1_pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_button1_pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_button1_pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_button1_pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a4 	.word	0x200000a4

08000170 <is_button2_pressed>:
int is_button2_pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_button2_pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_button2_pressed+0x16>
	{
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_button2_pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_button2_pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000a8 	.word	0x200000a8

08000194 <is_button3_pressed>:
int is_button3_pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_button3_pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_button3_pressed+0x16>
	{
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_button3_pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_button3_pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000ac 	.word	0x200000ac

080001b8 <getKeyInput>:

void getKeyInput()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e0c9      	b.n	8000358 <getKeyInput+0x1a0>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001c4:	4a69      	ldr	r2, [pc, #420]	; (800036c <getKeyInput+0x1b4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4968      	ldr	r1, [pc, #416]	; (8000370 <getKeyInput+0x1b8>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001d4:	4a67      	ldr	r2, [pc, #412]	; (8000374 <getKeyInput+0x1bc>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	4963      	ldr	r1, [pc, #396]	; (800036c <getKeyInput+0x1b4>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d139      	bne.n	800025e <getKeyInput+0xa6>
			keyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	4862      	ldr	r0, [pc, #392]	; (8000378 <getKeyInput+0x1c0>)
 80001f0:	f001 ffe2 	bl	80021b8 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a5e      	ldr	r2, [pc, #376]	; (8000374 <getKeyInput+0x1bc>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000200:	4a5b      	ldr	r2, [pc, #364]	; (8000370 <getKeyInput+0x1b8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4958      	ldr	r1, [pc, #352]	; (800036c <getKeyInput+0x1b4>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d124      	bne.n	800025e <getKeyInput+0xa6>
 8000214:	4a55      	ldr	r2, [pc, #340]	; (800036c <getKeyInput+0x1b4>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	4955      	ldr	r1, [pc, #340]	; (8000374 <getKeyInput+0x1bc>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d11a      	bne.n	800025e <getKeyInput+0xa6>
			{
				if(keyReg3[i] != keyReg2[i])
 8000228:	4a54      	ldr	r2, [pc, #336]	; (800037c <getKeyInput+0x1c4>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4950      	ldr	r1, [pc, #320]	; (8000374 <getKeyInput+0x1bc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d010      	beq.n	800025e <getKeyInput+0xa6>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800023c:	4a4d      	ldr	r2, [pc, #308]	; (8000374 <getKeyInput+0x1bc>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	494d      	ldr	r1, [pc, #308]	; (800037c <getKeyInput+0x1c4>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800024c:	4a49      	ldr	r2, [pc, #292]	; (8000374 <getKeyInput+0x1bc>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d102      	bne.n	800025e <getKeyInput+0xa6>
					{
						//TODO
						button1_flag = 1;
 8000258:	4b49      	ldr	r3, [pc, #292]	; (8000380 <getKeyInput+0x1c8>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d139      	bne.n	80002d8 <getKeyInput+0x120>
			keyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 8000264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000268:	4843      	ldr	r0, [pc, #268]	; (8000378 <getKeyInput+0x1c0>)
 800026a:	f001 ffa5 	bl	80021b8 <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	4619      	mov	r1, r3
 8000272:	4a40      	ldr	r2, [pc, #256]	; (8000374 <getKeyInput+0x1bc>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800027a:	4a3d      	ldr	r2, [pc, #244]	; (8000370 <getKeyInput+0x1b8>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000282:	493a      	ldr	r1, [pc, #232]	; (800036c <getKeyInput+0x1b4>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028a:	429a      	cmp	r2, r3
 800028c:	d124      	bne.n	80002d8 <getKeyInput+0x120>
 800028e:	4a37      	ldr	r2, [pc, #220]	; (800036c <getKeyInput+0x1b4>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000296:	4937      	ldr	r1, [pc, #220]	; (8000374 <getKeyInput+0x1bc>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d11a      	bne.n	80002d8 <getKeyInput+0x120>
			{
				if(keyReg3[i] != keyReg2[i])
 80002a2:	4a36      	ldr	r2, [pc, #216]	; (800037c <getKeyInput+0x1c4>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002aa:	4932      	ldr	r1, [pc, #200]	; (8000374 <getKeyInput+0x1bc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d010      	beq.n	80002d8 <getKeyInput+0x120>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 80002b6:	4a2f      	ldr	r2, [pc, #188]	; (8000374 <getKeyInput+0x1bc>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	492f      	ldr	r1, [pc, #188]	; (800037c <getKeyInput+0x1c4>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80002c6:	4a2b      	ldr	r2, [pc, #172]	; (8000374 <getKeyInput+0x1bc>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d102      	bne.n	80002d8 <getKeyInput+0x120>
					{
						//TODO
						button2_flag = 1;
 80002d2:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <getKeyInput+0x1cc>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d139      	bne.n	8000352 <getKeyInput+0x19a>
			keyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 80002de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e2:	4825      	ldr	r0, [pc, #148]	; (8000378 <getKeyInput+0x1c0>)
 80002e4:	f001 ff68 	bl	80021b8 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4619      	mov	r1, r3
 80002ec:	4a21      	ldr	r2, [pc, #132]	; (8000374 <getKeyInput+0x1bc>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <getKeyInput+0x1b8>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fc:	491b      	ldr	r1, [pc, #108]	; (800036c <getKeyInput+0x1b4>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000304:	429a      	cmp	r2, r3
 8000306:	d124      	bne.n	8000352 <getKeyInput+0x19a>
 8000308:	4a18      	ldr	r2, [pc, #96]	; (800036c <getKeyInput+0x1b4>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4918      	ldr	r1, [pc, #96]	; (8000374 <getKeyInput+0x1bc>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000318:	429a      	cmp	r2, r3
 800031a:	d11a      	bne.n	8000352 <getKeyInput+0x19a>
			{
				if(keyReg3[i] != keyReg2[i])
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <getKeyInput+0x1c4>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	4913      	ldr	r1, [pc, #76]	; (8000374 <getKeyInput+0x1bc>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032c:	429a      	cmp	r2, r3
 800032e:	d010      	beq.n	8000352 <getKeyInput+0x19a>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <getKeyInput+0x1bc>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	4910      	ldr	r1, [pc, #64]	; (800037c <getKeyInput+0x1c4>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000340:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <getKeyInput+0x1bc>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d102      	bne.n	8000352 <getKeyInput+0x19a>
					{
						//TODO
						button3_flag = 1;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <getKeyInput+0x1d0>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3301      	adds	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b02      	cmp	r3, #2
 800035c:	f77f af32 	ble.w	80001c4 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000000c 	.word	0x2000000c
 8000370:	20000000 	.word	0x20000000
 8000374:	20000018 	.word	0x20000018
 8000378:	40010c00 	.word	0x40010c00
 800037c:	20000024 	.word	0x20000024
 8000380:	200000a4 	.word	0x200000a4
 8000384:	200000a8 	.word	0x200000a8
 8000388:	200000ac 	.word	0x200000ac

0800038c <display7SEG_lineX>:

#include "control_7SEG.h"
#include "main.h"
#include "traffic_buffer.h"

void display7SEG_lineX(int num){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4859      	ldr	r0, [pc, #356]	; (8000500 <display7SEG_lineX+0x174>)
 800039a:	f001 ff24 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2102      	movs	r1, #2
 80003a2:	4857      	ldr	r0, [pc, #348]	; (8000500 <display7SEG_lineX+0x174>)
 80003a4:	f001 ff1f 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4854      	ldr	r0, [pc, #336]	; (8000500 <display7SEG_lineX+0x174>)
 80003ae:	f001 ff1a 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2108      	movs	r1, #8
 80003b6:	4852      	ldr	r0, [pc, #328]	; (8000500 <display7SEG_lineX+0x174>)
 80003b8:	f001 ff15 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2110      	movs	r1, #16
 80003c0:	484f      	ldr	r0, [pc, #316]	; (8000500 <display7SEG_lineX+0x174>)
 80003c2:	f001 ff10 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	484d      	ldr	r0, [pc, #308]	; (8000500 <display7SEG_lineX+0x174>)
 80003cc:	f001 ff0b 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2140      	movs	r1, #64	; 0x40
 80003d4:	484a      	ldr	r0, [pc, #296]	; (8000500 <display7SEG_lineX+0x174>)
 80003d6:	f001 ff06 	bl	80021e6 <HAL_GPIO_WritePin>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b09      	cmp	r3, #9
 80003de:	f200 8089 	bhi.w	80004f4 <display7SEG_lineX+0x168>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <display7SEG_lineX+0x5c>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	08000411 	.word	0x08000411
 80003ec:	0800041d 	.word	0x0800041d
 80003f0:	08000451 	.word	0x08000451
 80003f4:	08000467 	.word	0x08000467
 80003f8:	0800047d 	.word	0x0800047d
 80003fc:	0800049d 	.word	0x0800049d
 8000400:	080004b3 	.word	0x080004b3
 8000404:	080004bf 	.word	0x080004bf
 8000408:	080004f5 	.word	0x080004f5
 800040c:	080004e9 	.word	0x080004e9
	switch(num){
		case 0:
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2140      	movs	r1, #64	; 0x40
 8000414:	483a      	ldr	r0, [pc, #232]	; (8000500 <display7SEG_lineX+0x174>)
 8000416:	f001 fee6 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800041a:	e06c      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 1:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	4837      	ldr	r0, [pc, #220]	; (8000500 <display7SEG_lineX+0x174>)
 8000422:	f001 fee0 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2108      	movs	r1, #8
 800042a:	4835      	ldr	r0, [pc, #212]	; (8000500 <display7SEG_lineX+0x174>)
 800042c:	f001 fedb 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2110      	movs	r1, #16
 8000434:	4832      	ldr	r0, [pc, #200]	; (8000500 <display7SEG_lineX+0x174>)
 8000436:	f001 fed6 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2120      	movs	r1, #32
 800043e:	4830      	ldr	r0, [pc, #192]	; (8000500 <display7SEG_lineX+0x174>)
 8000440:	f001 fed1 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	482d      	ldr	r0, [pc, #180]	; (8000500 <display7SEG_lineX+0x174>)
 800044a:	f001 fecc 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800044e:	e052      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 2:
			HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2104      	movs	r1, #4
 8000454:	482a      	ldr	r0, [pc, #168]	; (8000500 <display7SEG_lineX+0x174>)
 8000456:	f001 fec6 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2120      	movs	r1, #32
 800045e:	4828      	ldr	r0, [pc, #160]	; (8000500 <display7SEG_lineX+0x174>)
 8000460:	f001 fec1 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 8000464:	e047      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 3:
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2110      	movs	r1, #16
 800046a:	4825      	ldr	r0, [pc, #148]	; (8000500 <display7SEG_lineX+0x174>)
 800046c:	f001 febb 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2120      	movs	r1, #32
 8000474:	4822      	ldr	r0, [pc, #136]	; (8000500 <display7SEG_lineX+0x174>)
 8000476:	f001 feb6 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800047a:	e03c      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 4:
			HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	481f      	ldr	r0, [pc, #124]	; (8000500 <display7SEG_lineX+0x174>)
 8000482:	f001 feb0 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2108      	movs	r1, #8
 800048a:	481d      	ldr	r0, [pc, #116]	; (8000500 <display7SEG_lineX+0x174>)
 800048c:	f001 feab 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2110      	movs	r1, #16
 8000494:	481a      	ldr	r0, [pc, #104]	; (8000500 <display7SEG_lineX+0x174>)
 8000496:	f001 fea6 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800049a:	e02c      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 5:
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2102      	movs	r1, #2
 80004a0:	4817      	ldr	r0, [pc, #92]	; (8000500 <display7SEG_lineX+0x174>)
 80004a2:	f001 fea0 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2110      	movs	r1, #16
 80004aa:	4815      	ldr	r0, [pc, #84]	; (8000500 <display7SEG_lineX+0x174>)
 80004ac:	f001 fe9b 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80004b0:	e021      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 6:
			HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2102      	movs	r1, #2
 80004b6:	4812      	ldr	r0, [pc, #72]	; (8000500 <display7SEG_lineX+0x174>)
 80004b8:	f001 fe95 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80004bc:	e01b      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 7:
			HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	480f      	ldr	r0, [pc, #60]	; (8000500 <display7SEG_lineX+0x174>)
 80004c4:	f001 fe8f 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <display7SEG_lineX+0x174>)
 80004ce:	f001 fe8a 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2120      	movs	r1, #32
 80004d6:	480a      	ldr	r0, [pc, #40]	; (8000500 <display7SEG_lineX+0x174>)
 80004d8:	f001 fe85 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <display7SEG_lineX+0x174>)
 80004e2:	f001 fe80 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80004e6:	e006      	b.n	80004f6 <display7SEG_lineX+0x16a>
		case 8:
			break;
		case 9:
			HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <display7SEG_lineX+0x174>)
 80004ee:	f001 fe7a 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80004f2:	e000      	b.n	80004f6 <display7SEG_lineX+0x16a>
		default:
			break;
 80004f4:	bf00      	nop
	  }
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40010c00 	.word	0x40010c00

08000504 <display7SEG_lineY>:

void display7SEG_lineY(int num){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2110      	movs	r1, #16
 8000510:	4864      	ldr	r0, [pc, #400]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000512:	f001 fe68 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051c:	4861      	ldr	r0, [pc, #388]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800051e:	f001 fe62 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000528:	485e      	ldr	r0, [pc, #376]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800052a:	f001 fe5c 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	485b      	ldr	r0, [pc, #364]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000536:	f001 fe56 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	4858      	ldr	r0, [pc, #352]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000542:	f001 fe50 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4855      	ldr	r0, [pc, #340]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800054e:	f001 fe4a 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	4854      	ldr	r0, [pc, #336]	; (80006a8 <display7SEG_lineY+0x1a4>)
 8000558:	f001 fe45 	bl	80021e6 <HAL_GPIO_WritePin>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b09      	cmp	r3, #9
 8000560:	f200 809a 	bhi.w	8000698 <display7SEG_lineY+0x194>
 8000564:	a201      	add	r2, pc, #4	; (adr r2, 800056c <display7SEG_lineY+0x68>)
 8000566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056a:	bf00      	nop
 800056c:	08000595 	.word	0x08000595
 8000570:	080005a1 	.word	0x080005a1
 8000574:	080005db 	.word	0x080005db
 8000578:	080005f5 	.word	0x080005f5
 800057c:	0800060f 	.word	0x0800060f
 8000580:	08000633 	.word	0x08000633
 8000584:	0800064d 	.word	0x0800064d
 8000588:	0800065b 	.word	0x0800065b
 800058c:	08000699 	.word	0x08000699
 8000590:	0800068b 	.word	0x0800068b
	switch(num){
		case 0:
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	4843      	ldr	r0, [pc, #268]	; (80006a8 <display7SEG_lineY+0x1a4>)
 800059a:	f001 fe24 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800059e:	e07c      	b.n	800069a <display7SEG_lineY+0x196>
		case 1:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	483f      	ldr	r0, [pc, #252]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005a6:	f001 fe1e 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	483c      	ldr	r0, [pc, #240]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005b2:	f001 fe18 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005bc:	4839      	ldr	r0, [pc, #228]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005be:	f001 fe12 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c8:	4836      	ldr	r0, [pc, #216]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005ca:	f001 fe0c 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	4835      	ldr	r0, [pc, #212]	; (80006a8 <display7SEG_lineY+0x1a4>)
 80005d4:	f001 fe07 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80005d8:	e05f      	b.n	800069a <display7SEG_lineY+0x196>
		case 2:
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005e2:	f001 fe00 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	482d      	ldr	r0, [pc, #180]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005ee:	f001 fdfa 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 80005f2:	e052      	b.n	800069a <display7SEG_lineY+0x196>
		case 3:
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fa:	482a      	ldr	r0, [pc, #168]	; (80006a4 <display7SEG_lineY+0x1a0>)
 80005fc:	f001 fdf3 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4827      	ldr	r0, [pc, #156]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000608:	f001 fded 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800060c:	e045      	b.n	800069a <display7SEG_lineY+0x196>
		case 4:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2110      	movs	r1, #16
 8000612:	4824      	ldr	r0, [pc, #144]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000614:	f001 fde7 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4821      	ldr	r0, [pc, #132]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000620:	f001 fde1 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	481e      	ldr	r0, [pc, #120]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800062c:	f001 fddb 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 8000630:	e033      	b.n	800069a <display7SEG_lineY+0x196>
		case 5:
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	481a      	ldr	r0, [pc, #104]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800063a:	f001 fdd4 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000646:	f001 fdce 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 800064a:	e026      	b.n	800069a <display7SEG_lineY+0x196>
		case 6:
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4814      	ldr	r0, [pc, #80]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000654:	f001 fdc7 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 8000658:	e01f      	b.n	800069a <display7SEG_lineY+0x196>
		case 7:
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000662:	f001 fdc0 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800066e:	f001 fdba 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <display7SEG_lineY+0x1a0>)
 800067a:	f001 fdb4 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <display7SEG_lineY+0x1a4>)
 8000684:	f001 fdaf 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 8000688:	e007      	b.n	800069a <display7SEG_lineY+0x196>
		case 8:
			break;
		case 9:
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <display7SEG_lineY+0x1a0>)
 8000692:	f001 fda8 	bl	80021e6 <HAL_GPIO_WritePin>
			break;
 8000696:	e000      	b.n	800069a <display7SEG_lineY+0x196>
		default:
			break;
 8000698:	bf00      	nop
	  }
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00

080006ac <update7SEG_lineX>:

void update7SEG_lineX(int index_lineX){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	switch(index_lineX){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <update7SEG_lineX+0x16>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d012      	beq.n	80006e6 <update7SEG_lineX+0x3a>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			display7SEG_lineX(_7SEG_buffer_lineX[1]);
			break;
	}
}
 80006c0:	e023      	b.n	800070a <update7SEG_lineX+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <update7SEG_lineX+0x68>)
 80006ca:	f001 fd8c 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	480f      	ldr	r0, [pc, #60]	; (8000714 <update7SEG_lineX+0x68>)
 80006d6:	f001 fd86 	bl	80021e6 <HAL_GPIO_WritePin>
			display7SEG_lineX(_7SEG_buffer_lineX[0]);
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <update7SEG_lineX+0x6c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe54 	bl	800038c <display7SEG_lineX>
			break;
 80006e4:	e011      	b.n	800070a <update7SEG_lineX+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <update7SEG_lineX+0x68>)
 80006ee:	f001 fd7a 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <update7SEG_lineX+0x68>)
 80006fa:	f001 fd74 	bl	80021e6 <HAL_GPIO_WritePin>
			display7SEG_lineX(_7SEG_buffer_lineX[1]);
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <update7SEG_lineX+0x6c>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe42 	bl	800038c <display7SEG_lineX>
			break;
 8000708:	bf00      	nop
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40010c00 	.word	0x40010c00
 8000718:	20000124 	.word	0x20000124

0800071c <update7SEG_lineY>:

void update7SEG_lineY(int index_lineY){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	switch(index_lineY){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <update7SEG_lineY+0x16>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d012      	beq.n	8000756 <update7SEG_lineY+0x3a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
			display7SEG_lineY(_7SEG_buffer_lineY[1]);
			break;
	}
}
 8000730:	e023      	b.n	800077a <update7SEG_lineY+0x5e>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <update7SEG_lineY+0x68>)
 800073a:	f001 fd54 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <update7SEG_lineY+0x68>)
 8000746:	f001 fd4e 	bl	80021e6 <HAL_GPIO_WritePin>
			display7SEG_lineY(_7SEG_buffer_lineY[0]);
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <update7SEG_lineY+0x6c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fed8 	bl	8000504 <display7SEG_lineY>
			break;
 8000754:	e011      	b.n	800077a <update7SEG_lineY+0x5e>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <update7SEG_lineY+0x68>)
 800075e:	f001 fd42 	bl	80021e6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <update7SEG_lineY+0x68>)
 800076a:	f001 fd3c 	bl	80021e6 <HAL_GPIO_WritePin>
			display7SEG_lineY(_7SEG_buffer_lineY[1]);
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <update7SEG_lineY+0x6c>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fec6 	bl	8000504 <display7SEG_lineY>
			break;
 8000778:	bf00      	nop
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010c00 	.word	0x40010c00
 8000788:	2000012c 	.word	0x2000012c

0800078c <fsm_7SEG_lineX_run>:
#include "traffic_buffer.h"

int status_7SEG_lineX = display_countDown_lineX;


void fsm_7SEG_lineX_run(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	switch(status_7SEG_lineX){
 8000790:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <fsm_7SEG_lineX_run+0x118>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b0b      	subs	r3, #11
 8000796:	2b03      	cmp	r3, #3
 8000798:	d878      	bhi.n	800088c <fsm_7SEG_lineX_run+0x100>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <fsm_7SEG_lineX_run+0x14>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007df 	.word	0x080007df
 80007a8:	08000819 	.word	0x08000819
 80007ac:	08000853 	.word	0x08000853
		case display_countDown_lineX:
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 80007b0:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <fsm_7SEG_lineX_run+0x11c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d16b      	bne.n	8000890 <fsm_7SEG_lineX_run+0x104>
			{
				update7SEG_lineX(index_lineX++);
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	493b      	ldr	r1, [pc, #236]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007c0:	600a      	str	r2, [r1, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff72 	bl	80006ac <update7SEG_lineX>
				if(index_lineX == 2) index_lineX = 0;
 80007c8:	4b38      	ldr	r3, [pc, #224]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d102      	bne.n	80007d6 <fsm_7SEG_lineX_run+0x4a>
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 80007d6:	20c8      	movs	r0, #200	; 0xc8
 80007d8:	f000 feaa 	bl	8001530 <setTimer4>
			}
			break;
 80007dc:	e058      	b.n	8000890 <fsm_7SEG_lineX_run+0x104>
		case display_mode02:
			_7SEG_buffer_lineX[0] = 0;
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_lineX[1] = 2;
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <fsm_7SEG_lineX_run+0x11c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d150      	bne.n	8000894 <fsm_7SEG_lineX_run+0x108>
			{
				update7SEG_lineX(index_lineX++);
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	492c      	ldr	r1, [pc, #176]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 80007fa:	600a      	str	r2, [r1, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff55 	bl	80006ac <update7SEG_lineX>
				if(index_lineX == 2) index_lineX = 0;
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d102      	bne.n	8000810 <fsm_7SEG_lineX_run+0x84>
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000810:	20c8      	movs	r0, #200	; 0xc8
 8000812:	f000 fe8d 	bl	8001530 <setTimer4>
			}
			break;
 8000816:	e03d      	b.n	8000894 <fsm_7SEG_lineX_run+0x108>
		case display_mode03:
			_7SEG_buffer_lineX[0] = 0;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_lineX[1] = 3;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 8000820:	2203      	movs	r2, #3
 8000822:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <fsm_7SEG_lineX_run+0x11c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d135      	bne.n	8000898 <fsm_7SEG_lineX_run+0x10c>
			{
				update7SEG_lineX(index_lineX++);
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	491e      	ldr	r1, [pc, #120]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000834:	600a      	str	r2, [r1, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff38 	bl	80006ac <update7SEG_lineX>
				if(index_lineX == 2) index_lineX = 0;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d102      	bne.n	800084a <fsm_7SEG_lineX_run+0xbe>
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 800084a:	20c8      	movs	r0, #200	; 0xc8
 800084c:	f000 fe70 	bl	8001530 <setTimer4>
			}
			break;
 8000850:	e022      	b.n	8000898 <fsm_7SEG_lineX_run+0x10c>
		case display_mode04:
			_7SEG_buffer_lineX[0] = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_lineX[1] = 4;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <fsm_7SEG_lineX_run+0x124>)
 800085a:	2204      	movs	r2, #4
 800085c:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <fsm_7SEG_lineX_run+0x11c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d11a      	bne.n	800089c <fsm_7SEG_lineX_run+0x110>
			{
				update7SEG_lineX(index_lineX++);
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	490f      	ldr	r1, [pc, #60]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 800086e:	600a      	str	r2, [r1, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff1b 	bl	80006ac <update7SEG_lineX>
				if(index_lineX == 2) index_lineX = 0;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <fsm_7SEG_lineX_run+0xf8>
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <fsm_7SEG_lineX_run+0x120>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000884:	20c8      	movs	r0, #200	; 0xc8
 8000886:	f000 fe53 	bl	8001530 <setTimer4>
			}
			break;
 800088a:	e007      	b.n	800089c <fsm_7SEG_lineX_run+0x110>
		default:
			break;
 800088c:	bf00      	nop
 800088e:	e006      	b.n	800089e <fsm_7SEG_lineX_run+0x112>
			break;
 8000890:	bf00      	nop
 8000892:	e004      	b.n	800089e <fsm_7SEG_lineX_run+0x112>
			break;
 8000894:	bf00      	nop
 8000896:	e002      	b.n	800089e <fsm_7SEG_lineX_run+0x112>
			break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <fsm_7SEG_lineX_run+0x112>
			break;
 800089c:	bf00      	nop
	}
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000030 	.word	0x20000030
 80008a8:	200000d4 	.word	0x200000d4
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	20000124 	.word	0x20000124

080008b4 <fsm_7SEG_lineY_run>:

int status_7SEG_lineY = display_countDown_lineY;



void fsm_7SEG_lineY_run(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	switch(status_7SEG_lineY){
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <fsm_7SEG_lineY_run+0x78>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d002      	beq.n	80008c6 <fsm_7SEG_lineY_run+0x12>
 80008c0:	2b10      	cmp	r3, #16
 80008c2:	d017      	beq.n	80008f4 <fsm_7SEG_lineY_run+0x40>
				if(index_lineY == 2) index_lineY = 0;
				setTimer6(200);
			}
			break;
		default:
			break;
 80008c4:	e030      	b.n	8000928 <fsm_7SEG_lineY_run+0x74>
			if(timer6_flag == 1)//control 2 led 7-SEG
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <fsm_7SEG_lineY_run+0x7c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d129      	bne.n	8000922 <fsm_7SEG_lineY_run+0x6e>
				update7SEG_lineY(index_lineY++);
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	4917      	ldr	r1, [pc, #92]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 80008d6:	600a      	str	r2, [r1, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff1f 	bl	800071c <update7SEG_lineY>
				if(index_lineY == 2) index_lineY = 0;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d102      	bne.n	80008ec <fsm_7SEG_lineY_run+0x38>
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 80008ec:	20c8      	movs	r0, #200	; 0xc8
 80008ee:	f000 fe53 	bl	8001598 <setTimer6>
			break;
 80008f2:	e016      	b.n	8000922 <fsm_7SEG_lineY_run+0x6e>
			if(timer6_flag == 1)//control 2 led 7-SEG
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <fsm_7SEG_lineY_run+0x7c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d114      	bne.n	8000926 <fsm_7SEG_lineY_run+0x72>
				update7SEG_lineY(index_lineY++);
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 8000904:	600a      	str	r2, [r1, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff08 	bl	800071c <update7SEG_lineY>
				if(index_lineY == 2) index_lineY = 0;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d102      	bne.n	800091a <fsm_7SEG_lineY_run+0x66>
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <fsm_7SEG_lineY_run+0x80>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 800091a:	20c8      	movs	r0, #200	; 0xc8
 800091c:	f000 fe3c 	bl	8001598 <setTimer6>
			break;
 8000920:	e001      	b.n	8000926 <fsm_7SEG_lineY_run+0x72>
			break;
 8000922:	bf00      	nop
 8000924:	e000      	b.n	8000928 <fsm_7SEG_lineY_run+0x74>
			break;
 8000926:	bf00      	nop
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000034 	.word	0x20000034
 8000930:	200000e4 	.word	0x200000e4
 8000934:	200000b8 	.word	0x200000b8

08000938 <fsm_system_run>:
#include "control_7SEG.h"
#include "traffic_buffer.h"
#include "fsm_traffic_blink.h"


void fsm_system_run(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	switch(status_system){
 800093c:	4ba1      	ldr	r3, [pc, #644]	; (8000bc4 <fsm_system_run+0x28c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b04      	cmp	r3, #4
 8000942:	f200 813d 	bhi.w	8000bc0 <fsm_system_run+0x288>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <fsm_system_run+0x14>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000995 	.word	0x08000995
 8000958:	08000a47 	.word	0x08000a47
 800095c:	08000af7 	.word	0x08000af7
		case INIT:
			status_system = MODE1;
 8000960:	4b98      	ldr	r3, [pc, #608]	; (8000bc4 <fsm_system_run+0x28c>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
			break;
 8000966:	e12b      	b.n	8000bc0 <fsm_system_run+0x288>
		case MODE1://normal mode: The traffic light application is running normally
			status_traffic_lineX = display_traffic_lineX;
 8000968:	4b97      	ldr	r3, [pc, #604]	; (8000bc8 <fsm_system_run+0x290>)
 800096a:	2205      	movs	r2, #5
 800096c:	601a      	str	r2, [r3, #0]
			status_traffic_lineY = display_traffic_lineY;
 800096e:	4b97      	ldr	r3, [pc, #604]	; (8000bcc <fsm_system_run+0x294>)
 8000970:	2209      	movs	r2, #9
 8000972:	601a      	str	r2, [r3, #0]
			status_7SEG_lineX = display_countDown_lineX;
 8000974:	4b96      	ldr	r3, [pc, #600]	; (8000bd0 <fsm_system_run+0x298>)
 8000976:	220b      	movs	r2, #11
 8000978:	601a      	str	r2, [r3, #0]
			status_7SEG_lineY = display_countDown_lineY;
 800097a:	4b96      	ldr	r3, [pc, #600]	; (8000bd4 <fsm_system_run+0x29c>)
 800097c:	220f      	movs	r2, #15
 800097e:	601a      	str	r2, [r3, #0]
			if(is_button1_pressed() == 1){
 8000980:	f7ff fbe4 	bl	800014c <is_button1_pressed>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 8113 	bne.w	8000bb2 <fsm_system_run+0x27a>
				status_system = MODE2;
 800098c:	4b8d      	ldr	r3, [pc, #564]	; (8000bc4 <fsm_system_run+0x28c>)
 800098e:	2202      	movs	r2, #2
 8000990:	601a      	str	r2, [r3, #0]
			}
			break;
 8000992:	e10e      	b.n	8000bb2 <fsm_system_run+0x27a>
		case MODE2://mode2: Modify time duration for the red LEDs
			status_traffic_lineX = modifying_led_red_lineX;
 8000994:	4b8c      	ldr	r3, [pc, #560]	; (8000bc8 <fsm_system_run+0x290>)
 8000996:	2206      	movs	r2, #6
 8000998:	601a      	str	r2, [r3, #0]
			status_traffic_lineY = modifying_led_red_lineY;
 800099a:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <fsm_system_run+0x294>)
 800099c:	221e      	movs	r2, #30
 800099e:	601a      	str	r2, [r3, #0]
			status_7SEG_lineX = display_mode02;
 80009a0:	4b8b      	ldr	r3, [pc, #556]	; (8000bd0 <fsm_system_run+0x298>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
			status_7SEG_lineY = display_time_value;
 80009a6:	4b8b      	ldr	r3, [pc, #556]	; (8000bd4 <fsm_system_run+0x29c>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	601a      	str	r2, [r3, #0]

			//lineY button is used to increase the time duration value for the red LEDs
			if(is_button2_pressed() == 1){
 80009ac:	f7ff fbe0 	bl	8000170 <is_button2_pressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d117      	bne.n	80009e6 <fsm_system_run+0xae>
				time_red_lineX++;
 80009b6:	4b88      	ldr	r3, [pc, #544]	; (8000bd8 <fsm_system_run+0x2a0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a86      	ldr	r2, [pc, #536]	; (8000bd8 <fsm_system_run+0x2a0>)
 80009be:	6013      	str	r3, [r2, #0]
				time_red_lineY++;
 80009c0:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <fsm_system_run+0x2a4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	4a85      	ldr	r2, [pc, #532]	; (8000bdc <fsm_system_run+0x2a4>)
 80009c8:	6013      	str	r3, [r2, #0]
				if(time_red_lineX > 99) time_red_lineX = 0;
 80009ca:	4b83      	ldr	r3, [pc, #524]	; (8000bd8 <fsm_system_run+0x2a0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b63      	cmp	r3, #99	; 0x63
 80009d0:	dd02      	ble.n	80009d8 <fsm_system_run+0xa0>
 80009d2:	4b81      	ldr	r3, [pc, #516]	; (8000bd8 <fsm_system_run+0x2a0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
				if(time_red_lineY > 99) time_red_lineY = 0;
 80009d8:	4b80      	ldr	r3, [pc, #512]	; (8000bdc <fsm_system_run+0x2a4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	dd02      	ble.n	80009e6 <fsm_system_run+0xae>
 80009e0:	4b7e      	ldr	r3, [pc, #504]	; (8000bdc <fsm_system_run+0x2a4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]

			}
			//update buffer
			_7SEG_buffer_lineY[0] = time_red_lineY/10;
 80009e6:	4b7d      	ldr	r3, [pc, #500]	; (8000bdc <fsm_system_run+0x2a4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a7d      	ldr	r2, [pc, #500]	; (8000be0 <fsm_system_run+0x2a8>)
 80009ec:	fb82 1203 	smull	r1, r2, r2, r3
 80009f0:	1092      	asrs	r2, r2, #2
 80009f2:	17db      	asrs	r3, r3, #31
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	4a7b      	ldr	r2, [pc, #492]	; (8000be4 <fsm_system_run+0x2ac>)
 80009f8:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_red_lineY%10;
 80009fa:	4b78      	ldr	r3, [pc, #480]	; (8000bdc <fsm_system_run+0x2a4>)
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	4b78      	ldr	r3, [pc, #480]	; (8000be0 <fsm_system_run+0x2a8>)
 8000a00:	fb83 2301 	smull	r2, r3, r3, r1
 8000a04:	109a      	asrs	r2, r3, #2
 8000a06:	17cb      	asrs	r3, r1, #31
 8000a08:	1ad2      	subs	r2, r2, r3
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	1aca      	subs	r2, r1, r3
 8000a14:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <fsm_system_run+0x2ac>)
 8000a16:	605a      	str	r2, [r3, #4]

			//The third button is used to set the value
			if(is_button3_pressed() == 1){
 8000a18:	f7ff fbbc 	bl	8000194 <is_button3_pressed>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d107      	bne.n	8000a32 <fsm_system_run+0xfa>
				time_red_lineX_temp= time_red_lineX;
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <fsm_system_run+0x2a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <fsm_system_run+0x2b0>)
 8000a28:	6013      	str	r3, [r2, #0]
				time_red_lineY_temp= time_red_lineY;
 8000a2a:	4b6c      	ldr	r3, [pc, #432]	; (8000bdc <fsm_system_run+0x2a4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a6f      	ldr	r2, [pc, #444]	; (8000bec <fsm_system_run+0x2b4>)
 8000a30:	6013      	str	r3, [r2, #0]
			}
	
			// change into MODE3
			if(is_button1_pressed() == 1){
 8000a32:	f7ff fb8b 	bl	800014c <is_button1_pressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	f040 80bc 	bne.w	8000bb6 <fsm_system_run+0x27e>
				status_system = MODE3;
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <fsm_system_run+0x28c>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a44:	e0b7      	b.n	8000bb6 <fsm_system_run+0x27e>
		case MODE3://Mode 3 - Modify time duration for the yellow LEDs:
			status_traffic_lineX = modifying_led_yellow_lineX;
 8000a46:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <fsm_system_run+0x290>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
			status_traffic_lineY = modifying_led_yellow_lineY;
 8000a4c:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <fsm_system_run+0x294>)
 8000a4e:	221f      	movs	r2, #31
 8000a50:	601a      	str	r2, [r3, #0]
			status_7SEG_lineX = display_mode03;
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <fsm_system_run+0x298>)
 8000a54:	220d      	movs	r2, #13
 8000a56:	601a      	str	r2, [r3, #0]
			status_7SEG_lineY = display_time_value;
 8000a58:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <fsm_system_run+0x29c>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	601a      	str	r2, [r3, #0]

			//lineY button is used to increase the time duration value for the yellow LEDs
			if(is_button2_pressed() == 1){
 8000a5e:	f7ff fb87 	bl	8000170 <is_button2_pressed>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d117      	bne.n	8000a98 <fsm_system_run+0x160>
				time_yellow_lineX++;
 8000a68:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <fsm_system_run+0x2b8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a60      	ldr	r2, [pc, #384]	; (8000bf0 <fsm_system_run+0x2b8>)
 8000a70:	6013      	str	r3, [r2, #0]
				time_yellow_lineY++;
 8000a72:	4b60      	ldr	r3, [pc, #384]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a5e      	ldr	r2, [pc, #376]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000a7a:	6013      	str	r3, [r2, #0]
				if(time_yellow_lineX > 99) time_yellow_lineX = 0;
 8000a7c:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <fsm_system_run+0x2b8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b63      	cmp	r3, #99	; 0x63
 8000a82:	dd02      	ble.n	8000a8a <fsm_system_run+0x152>
 8000a84:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <fsm_system_run+0x2b8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
				if(time_yellow_lineY > 99) time_yellow_lineY = 0;
 8000a8a:	4b5a      	ldr	r3, [pc, #360]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b63      	cmp	r3, #99	; 0x63
 8000a90:	dd02      	ble.n	8000a98 <fsm_system_run+0x160>
 8000a92:	4b58      	ldr	r3, [pc, #352]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
			}
			//update buffer
			_7SEG_buffer_lineY[0] = time_yellow_lineY/10;
 8000a98:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <fsm_system_run+0x2a8>)
 8000a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa2:	1092      	asrs	r2, r2, #2
 8000aa4:	17db      	asrs	r3, r3, #31
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <fsm_system_run+0x2ac>)
 8000aaa:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_yellow_lineY%10;
 8000aac:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <fsm_system_run+0x2a8>)
 8000ab2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab6:	109a      	asrs	r2, r3, #2
 8000ab8:	17cb      	asrs	r3, r1, #31
 8000aba:	1ad2      	subs	r2, r2, r3
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1aca      	subs	r2, r1, r3
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <fsm_system_run+0x2ac>)
 8000ac8:	605a      	str	r2, [r3, #4]

			//The third button is used to set the value
			if(is_button3_pressed() == 1){
 8000aca:	f7ff fb63 	bl	8000194 <is_button3_pressed>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d107      	bne.n	8000ae4 <fsm_system_run+0x1ac>
				time_yellow_lineX_temp= time_yellow_lineX;
 8000ad4:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <fsm_system_run+0x2b8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <fsm_system_run+0x2c0>)
 8000ada:	6013      	str	r3, [r2, #0]
				time_yellow_lineY_temp= time_yellow_lineY;
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <fsm_system_run+0x2bc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a46      	ldr	r2, [pc, #280]	; (8000bfc <fsm_system_run+0x2c4>)
 8000ae2:	6013      	str	r3, [r2, #0]
			}

			// change into MODE4
			if(is_button1_pressed() == 1){
 8000ae4:	f7ff fb32 	bl	800014c <is_button1_pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d165      	bne.n	8000bba <fsm_system_run+0x282>
				status_system = MODE4;
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <fsm_system_run+0x28c>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	601a      	str	r2, [r3, #0]
			}
			break;
 8000af4:	e061      	b.n	8000bba <fsm_system_run+0x282>
		case MODE4://Mode 4 - Modify time duration for the green LEDs
			status_traffic_lineX = modifying_led_green_lineX;
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <fsm_system_run+0x290>)
 8000af8:	2208      	movs	r2, #8
 8000afa:	601a      	str	r2, [r3, #0]
			status_traffic_lineY = modifying_led_green_lineY;
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <fsm_system_run+0x294>)
 8000afe:	2220      	movs	r2, #32
 8000b00:	601a      	str	r2, [r3, #0]
			status_7SEG_lineX = display_mode04;
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <fsm_system_run+0x298>)
 8000b04:	220e      	movs	r2, #14
 8000b06:	601a      	str	r2, [r3, #0]
			status_7SEG_lineY = display_time_value;
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <fsm_system_run+0x29c>)
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	601a      	str	r2, [r3, #0]

			//lineY button is used to increase the time duration value for the green LEDs
			if(is_button2_pressed() == 1){
 8000b0e:	f7ff fb2f 	bl	8000170 <is_button2_pressed>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d117      	bne.n	8000b48 <fsm_system_run+0x210>
				time_green_lineX++;
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <fsm_system_run+0x2c8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <fsm_system_run+0x2c8>)
 8000b20:	6013      	str	r3, [r2, #0]
				time_green_lineY++;
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b2a:	6013      	str	r3, [r2, #0]
				if(time_green_lineX > 99) time_green_lineX = 0;
 8000b2c:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <fsm_system_run+0x2c8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b63      	cmp	r3, #99	; 0x63
 8000b32:	dd02      	ble.n	8000b3a <fsm_system_run+0x202>
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <fsm_system_run+0x2c8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
				if(time_green_lineY > 99) time_green_lineY = 0;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b63      	cmp	r3, #99	; 0x63
 8000b40:	dd02      	ble.n	8000b48 <fsm_system_run+0x210>
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
			}
			//update buffer
			_7SEG_buffer_lineY[0] = time_green_lineY/10;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <fsm_system_run+0x2a8>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	1092      	asrs	r2, r2, #2
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <fsm_system_run+0x2ac>)
 8000b5a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_green_lineY%10;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <fsm_system_run+0x2a8>)
 8000b62:	fb83 2301 	smull	r2, r3, r3, r1
 8000b66:	109a      	asrs	r2, r3, #2
 8000b68:	17cb      	asrs	r3, r1, #31
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	1aca      	subs	r2, r1, r3
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <fsm_system_run+0x2ac>)
 8000b78:	605a      	str	r2, [r3, #4]

			//The third button is used to set the value
			if(is_button3_pressed() == 1){
 8000b7a:	f7ff fb0b 	bl	8000194 <is_button3_pressed>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d107      	bne.n	8000b94 <fsm_system_run+0x25c>
				time_green_lineX_temp= time_green_lineX;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <fsm_system_run+0x2c8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <fsm_system_run+0x2d0>)
 8000b8a:	6013      	str	r3, [r2, #0]
				time_green_lineY_temp= time_green_lineY;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <fsm_system_run+0x2cc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <fsm_system_run+0x2d4>)
 8000b92:	6013      	str	r3, [r2, #0]
			}
			// turn back into MODE1
			if(is_button1_pressed() == 1){
 8000b94:	f7ff fada 	bl	800014c <is_button1_pressed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d10f      	bne.n	8000bbe <fsm_system_run+0x286>
				status_traffic_blink_lineX = init_lineX;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <fsm_system_run+0x2d8>)
 8000ba0:	2213      	movs	r2, #19
 8000ba2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_lineY = init_lineY;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <fsm_system_run+0x2dc>)
 8000ba6:	2217      	movs	r2, #23
 8000ba8:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <fsm_system_run+0x28c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bb0:	e005      	b.n	8000bbe <fsm_system_run+0x286>
			break;
 8000bb2:	bf00      	nop
 8000bb4:	e004      	b.n	8000bc0 <fsm_system_run+0x288>
			break;
 8000bb6:	bf00      	nop
 8000bb8:	e002      	b.n	8000bc0 <fsm_system_run+0x288>
			break;
 8000bba:	bf00      	nop
 8000bbc:	e000      	b.n	8000bc0 <fsm_system_run+0x288>
			break;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000b0 	.word	0x200000b0
 8000bc8:	20000040 	.word	0x20000040
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	20000030 	.word	0x20000030
 8000bd4:	20000034 	.word	0x20000034
 8000bd8:	20000048 	.word	0x20000048
 8000bdc:	20000068 	.word	0x20000068
 8000be0:	66666667 	.word	0x66666667
 8000be4:	2000012c 	.word	0x2000012c
 8000be8:	20000054 	.word	0x20000054
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	20000050 	.word	0x20000050
 8000bf4:	20000064 	.word	0x20000064
 8000bf8:	2000005c 	.word	0x2000005c
 8000bfc:	20000070 	.word	0x20000070
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	20000060 	.word	0x20000060
 8000c08:	20000058 	.word	0x20000058
 8000c0c:	2000006c 	.word	0x2000006c
 8000c10:	20000038 	.word	0x20000038
 8000c14:	2000003c 	.word	0x2000003c

08000c18 <fsm_traffic_blink_lineX_run>:

int status_traffic_blink_lineX = init_lineX;
int status_traffic_blink_lineY = init_lineY;


void fsm_traffic_blink_lineX_run(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_lineX){
 8000c1c:	4b85      	ldr	r3, [pc, #532]	; (8000e34 <fsm_traffic_blink_lineX_run+0x21c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3b13      	subs	r3, #19
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	f200 80fd 	bhi.w	8000e22 <fsm_traffic_blink_lineX_run+0x20a>
 8000c28:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <fsm_traffic_blink_lineX_run+0x18>)
 8000c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2e:	bf00      	nop
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c6b 	.word	0x08000c6b
 8000c38:	08000cff 	.word	0x08000cff
 8000c3c:	08000d91 	.word	0x08000d91
		case init_lineX:
			status_traffic_blink_lineX = red_lineX;
 8000c40:	4b7c      	ldr	r3, [pc, #496]	; (8000e34 <fsm_traffic_blink_lineX_run+0x21c>)
 8000c42:	2214      	movs	r2, #20
 8000c44:	601a      	str	r2, [r3, #0]
			traffic_buffer_lineX[0] = time_red_lineX*1000;
 8000c46:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <fsm_traffic_blink_lineX_run+0x220>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	4a7a      	ldr	r2, [pc, #488]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000c54:	6013      	str	r3, [r2, #0]
			setTimer1(traffic_buffer_lineX[0]);//led red will turn on in traffic_buffer_lineX[0]/1000 lineXs
 8000c56:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fc1a 	bl	8001494 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f000 fc4a 	bl	80014fc <setTimer3>
			break;
 8000c68:	e0e2      	b.n	8000e30 <fsm_traffic_blink_lineX_run+0x218>
		case red_lineX:
			onRed_lineX();
 8000c6a:	f000 fe59 	bl	8001920 <onRed_lineX>
			//update _7SEG_buffer_lineX
			_7SEG_buffer_lineX[0] = time_red_lineX_temp/10;
 8000c6e:	4b74      	ldr	r3, [pc, #464]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a74      	ldr	r2, [pc, #464]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000c74:	fb82 1203 	smull	r1, r2, r2, r3
 8000c78:	1092      	asrs	r2, r2, #2
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a72      	ldr	r2, [pc, #456]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000c80:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineX[1] = time_red_lineX_temp%10;
 8000c82:	4b6f      	ldr	r3, [pc, #444]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000c88:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8c:	109a      	asrs	r2, r3, #2
 8000c8e:	17cb      	asrs	r3, r1, #31
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1aca      	subs	r2, r1, r3
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000c9e:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000ca0:	4b6a      	ldr	r3, [pc, #424]	; (8000e4c <fsm_traffic_blink_lineX_run+0x234>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d110      	bne.n	8000cca <fsm_traffic_blink_lineX_run+0xb2>
				time_red_lineX_temp--;
 8000ca8:	4b65      	ldr	r3, [pc, #404]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	4a64      	ldr	r2, [pc, #400]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000cb0:	6013      	str	r3, [r2, #0]
				if(time_red_lineX_temp <= 0){
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dc03      	bgt.n	8000cc2 <fsm_traffic_blink_lineX_run+0xaa>
					time_red_lineX_temp = time_red_lineX;
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <fsm_traffic_blink_lineX_run+0x220>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a60      	ldr	r2, [pc, #384]	; (8000e40 <fsm_traffic_blink_lineX_run+0x228>)
 8000cc0:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f000 fc19 	bl	80014fc <setTimer3>
			}

			if(timer1_flag == 1){
 8000cca:	4b61      	ldr	r3, [pc, #388]	; (8000e50 <fsm_traffic_blink_lineX_run+0x238>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 80a9 	bne.w	8000e26 <fsm_traffic_blink_lineX_run+0x20e>
				status_traffic_blink_lineX = green_lineX;
 8000cd4:	4b57      	ldr	r3, [pc, #348]	; (8000e34 <fsm_traffic_blink_lineX_run+0x21c>)
 8000cd6:	2215      	movs	r2, #21
 8000cd8:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineX[1] = time_green_lineX*1000;
 8000cda:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <fsm_traffic_blink_lineX_run+0x23c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce2:	fb02 f303 	mul.w	r3, r2, r3
 8000ce6:	4a55      	ldr	r2, [pc, #340]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000ce8:	6053      	str	r3, [r2, #4]
				setTimer1(traffic_buffer_lineX[1]);
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fbd0 	bl	8001494 <setTimer1>
				setTimer3(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf8:	f000 fc00 	bl	80014fc <setTimer3>
			}
			break;
 8000cfc:	e093      	b.n	8000e26 <fsm_traffic_blink_lineX_run+0x20e>
		case green_lineX:
			onGreen_lineX();
 8000cfe:	f000 fe25 	bl	800194c <onGreen_lineX>
			//update _7SEG_buffer_lineX
			_7SEG_buffer_lineX[0] = time_green_lineX_temp/10;
 8000d02:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1092      	asrs	r2, r2, #2
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a4d      	ldr	r2, [pc, #308]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000d14:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineX[1] = time_green_lineX_temp%10;
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000d1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d20:	109a      	asrs	r2, r3, #2
 8000d22:	17cb      	asrs	r3, r1, #31
 8000d24:	1ad2      	subs	r2, r2, r3
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	1aca      	subs	r2, r1, r3
 8000d30:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000d32:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <fsm_traffic_blink_lineX_run+0x234>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d110      	bne.n	8000d5e <fsm_traffic_blink_lineX_run+0x146>
				time_green_lineX_temp--;
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a45      	ldr	r2, [pc, #276]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d44:	6013      	str	r3, [r2, #0]
				if(time_green_lineX_temp == 0){
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <fsm_traffic_blink_lineX_run+0x13e>
					time_green_lineX_temp = time_green_lineX;
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <fsm_traffic_blink_lineX_run+0x23c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a41      	ldr	r2, [pc, #260]	; (8000e58 <fsm_traffic_blink_lineX_run+0x240>)
 8000d54:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f000 fbcf 	bl	80014fc <setTimer3>
			}

			if(timer1_flag == 1){
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <fsm_traffic_blink_lineX_run+0x238>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d161      	bne.n	8000e2a <fsm_traffic_blink_lineX_run+0x212>
				status_traffic_blink_lineX = yellow_lineX;
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <fsm_traffic_blink_lineX_run+0x21c>)
 8000d68:	2216      	movs	r2, #22
 8000d6a:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineX[2] = time_yellow_lineX*1000;
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <fsm_traffic_blink_lineX_run+0x244>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000d7a:	6093      	str	r3, [r2, #8]
				setTimer1(traffic_buffer_lineX[2]);
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fb87 	bl	8001494 <setTimer1>
				setTimer3(1000);
 8000d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8a:	f000 fbb7 	bl	80014fc <setTimer3>
			}
			break;
 8000d8e:	e04c      	b.n	8000e2a <fsm_traffic_blink_lineX_run+0x212>
		case yellow_lineX:
			onYellow_lineX();
 8000d90:	f000 fdf2 	bl	8001978 <onYellow_lineX>
			//update _7SEG_buffer_lineX
			_7SEG_buffer_lineX[0] = time_yellow_lineX_temp/10;
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9e:	1092      	asrs	r2, r2, #2
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000da6:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineX[1] = time_yellow_lineX_temp%10;
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <fsm_traffic_blink_lineX_run+0x22c>)
 8000dae:	fb83 2301 	smull	r2, r3, r3, r1
 8000db2:	109a      	asrs	r2, r3, #2
 8000db4:	17cb      	asrs	r3, r1, #31
 8000db6:	1ad2      	subs	r2, r2, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	1aca      	subs	r2, r1, r3
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <fsm_traffic_blink_lineX_run+0x230>)
 8000dc4:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <fsm_traffic_blink_lineX_run+0x234>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d110      	bne.n	8000df0 <fsm_traffic_blink_lineX_run+0x1d8>
				time_yellow_lineX_temp--;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000dd6:	6013      	str	r3, [r2, #0]
				if(time_yellow_lineX_temp == 0){
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d103      	bne.n	8000de8 <fsm_traffic_blink_lineX_run+0x1d0>
					time_yellow_lineX_temp = time_yellow_lineX;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <fsm_traffic_blink_lineX_run+0x244>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <fsm_traffic_blink_lineX_run+0x248>)
 8000de6:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dec:	f000 fb86 	bl	80014fc <setTimer3>
			}

			if(timer1_flag == 1){
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <fsm_traffic_blink_lineX_run+0x238>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d11a      	bne.n	8000e2e <fsm_traffic_blink_lineX_run+0x216>
				status_traffic_blink_lineX = red_lineX;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <fsm_traffic_blink_lineX_run+0x21c>)
 8000dfa:	2214      	movs	r2, #20
 8000dfc:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineX[0] = time_red_lineX*1000;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <fsm_traffic_blink_lineX_run+0x220>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000e0c:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_lineX[0]);
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <fsm_traffic_blink_lineX_run+0x224>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fb3e 	bl	8001494 <setTimer1>
				setTimer3(1000);
 8000e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1c:	f000 fb6e 	bl	80014fc <setTimer3>
			}
			break;
 8000e20:	e005      	b.n	8000e2e <fsm_traffic_blink_lineX_run+0x216>
		default:
			break;
 8000e22:	bf00      	nop
 8000e24:	e004      	b.n	8000e30 <fsm_traffic_blink_lineX_run+0x218>
			break;
 8000e26:	bf00      	nop
 8000e28:	e002      	b.n	8000e30 <fsm_traffic_blink_lineX_run+0x218>
			break;
 8000e2a:	bf00      	nop
 8000e2c:	e000      	b.n	8000e30 <fsm_traffic_blink_lineX_run+0x218>
			break;
 8000e2e:	bf00      	nop
	}
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000038 	.word	0x20000038
 8000e38:	20000048 	.word	0x20000048
 8000e3c:	2000010c 	.word	0x2000010c
 8000e40:	20000054 	.word	0x20000054
 8000e44:	66666667 	.word	0x66666667
 8000e48:	20000124 	.word	0x20000124
 8000e4c:	200000cc 	.word	0x200000cc
 8000e50:	200000bc 	.word	0x200000bc
 8000e54:	2000004c 	.word	0x2000004c
 8000e58:	20000058 	.word	0x20000058
 8000e5c:	20000050 	.word	0x20000050
 8000e60:	2000005c 	.word	0x2000005c

08000e64 <fsm_traffic_blink_lineY_run>:

void fsm_traffic_blink_lineY_run(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_lineY){
 8000e68:	4b85      	ldr	r3, [pc, #532]	; (8001080 <fsm_traffic_blink_lineY_run+0x21c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3b17      	subs	r3, #23
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	f200 80fd 	bhi.w	800106e <fsm_traffic_blink_lineY_run+0x20a>
 8000e74:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <fsm_traffic_blink_lineY_run+0x18>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000fdd 	.word	0x08000fdd
 8000e84:	08000eb7 	.word	0x08000eb7
 8000e88:	08000f4b 	.word	0x08000f4b
		case init_lineY:
			status_traffic_blink_lineY = green_lineY;
 8000e8c:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <fsm_traffic_blink_lineY_run+0x21c>)
 8000e8e:	2219      	movs	r2, #25
 8000e90:	601a      	str	r2, [r3, #0]
			traffic_buffer_lineY[0] = time_green_lineY*1000;
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <fsm_traffic_blink_lineY_run+0x220>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	4a7a      	ldr	r2, [pc, #488]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000ea0:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_lineY[0]);
 8000ea2:	4b79      	ldr	r3, [pc, #484]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fb0e 	bl	80014c8 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb0:	f000 fb58 	bl	8001564 <setTimer5>
			break;
 8000eb4:	e0e2      	b.n	800107c <fsm_traffic_blink_lineY_run+0x218>
		case green_lineY:
			onGreen_lineY();
 8000eb6:	f000 fd8d 	bl	80019d4 <onGreen_lineY>
			//update _7SEG_buffer_lineY
			_7SEG_buffer_lineY[0] = time_green_lineY_temp/10;
 8000eba:	4b74      	ldr	r3, [pc, #464]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a74      	ldr	r2, [pc, #464]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec4:	1092      	asrs	r2, r2, #2
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4a72      	ldr	r2, [pc, #456]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8000ecc:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_green_lineY_temp%10;
 8000ece:	4b6f      	ldr	r3, [pc, #444]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000ed0:	6819      	ldr	r1, [r3, #0]
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000ed4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed8:	109a      	asrs	r2, r3, #2
 8000eda:	17cb      	asrs	r3, r1, #31
 8000edc:	1ad2      	subs	r2, r2, r3
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	1aca      	subs	r2, r1, r3
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8000eea:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <fsm_traffic_blink_lineY_run+0x234>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d110      	bne.n	8000f16 <fsm_traffic_blink_lineY_run+0xb2>
				time_green_lineY_temp--;
 8000ef4:	4b65      	ldr	r3, [pc, #404]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a64      	ldr	r2, [pc, #400]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000efc:	6013      	str	r3, [r2, #0]
				// if(time_green_lineY_temp != 0) setTimer5(1000);
				if(time_green_lineY_temp == 0){
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <fsm_traffic_blink_lineY_run+0xaa>
					time_green_lineY_temp = time_green_lineY;
 8000f06:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <fsm_traffic_blink_lineY_run+0x220>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a60      	ldr	r2, [pc, #384]	; (800108c <fsm_traffic_blink_lineY_run+0x228>)
 8000f0c:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f12:	f000 fb27 	bl	8001564 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f16:	4b61      	ldr	r3, [pc, #388]	; (800109c <fsm_traffic_blink_lineY_run+0x238>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	f040 80a9 	bne.w	8001072 <fsm_traffic_blink_lineY_run+0x20e>
				status_traffic_blink_lineY = yellow_lineY;
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <fsm_traffic_blink_lineY_run+0x21c>)
 8000f22:	221a      	movs	r2, #26
 8000f24:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineY[1] = time_yellow_lineY*1000;
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <fsm_traffic_blink_lineY_run+0x23c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a55      	ldr	r2, [pc, #340]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000f34:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_lineY[1]);
 8000f36:	4b54      	ldr	r3, [pc, #336]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fac4 	bl	80014c8 <setTimer2>
				setTimer5(1000);
 8000f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f44:	f000 fb0e 	bl	8001564 <setTimer5>
			}
			break;
 8000f48:	e093      	b.n	8001072 <fsm_traffic_blink_lineY_run+0x20e>
		case yellow_lineY:
			onYellow_lineY();
 8000f4a:	f000 fd5b 	bl	8001a04 <onYellow_lineY>
			//update _7SEG_buffer_lineY
			_7SEG_buffer_lineY[0] = time_yellow_lineY_temp/10;
 8000f4e:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000f54:	fb82 1203 	smull	r1, r2, r2, r3
 8000f58:	1092      	asrs	r2, r2, #2
 8000f5a:	17db      	asrs	r3, r3, #31
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8000f60:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_yellow_lineY_temp%10;
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000f68:	fb83 2301 	smull	r2, r3, r3, r1
 8000f6c:	109a      	asrs	r2, r3, #2
 8000f6e:	17cb      	asrs	r3, r1, #31
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	1aca      	subs	r2, r1, r3
 8000f7c:	4b45      	ldr	r3, [pc, #276]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8000f7e:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <fsm_traffic_blink_lineY_run+0x234>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d110      	bne.n	8000faa <fsm_traffic_blink_lineY_run+0x146>
				time_yellow_lineY_temp--;
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a45      	ldr	r2, [pc, #276]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000f90:	6013      	str	r3, [r2, #0]
				if(time_yellow_lineY_temp == 0){
 8000f92:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <fsm_traffic_blink_lineY_run+0x13e>
					time_yellow_lineY_temp = time_yellow_lineY;
 8000f9a:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <fsm_traffic_blink_lineY_run+0x23c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <fsm_traffic_blink_lineY_run+0x240>)
 8000fa0:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f000 fadd 	bl	8001564 <setTimer5>
			}

			if(timer2_flag == 1){
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <fsm_traffic_blink_lineY_run+0x238>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d161      	bne.n	8001076 <fsm_traffic_blink_lineY_run+0x212>
				status_traffic_blink_lineY = red_lineY;
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <fsm_traffic_blink_lineY_run+0x21c>)
 8000fb4:	2218      	movs	r2, #24
 8000fb6:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineY[2] = time_red_lineY*1000;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <fsm_traffic_blink_lineY_run+0x244>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4a30      	ldr	r2, [pc, #192]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000fc6:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_lineY[2]);
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fa7b 	bl	80014c8 <setTimer2>
				setTimer5(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f000 fac5 	bl	8001564 <setTimer5>
			}
			break;
 8000fda:	e04c      	b.n	8001076 <fsm_traffic_blink_lineY_run+0x212>
		case red_lineY:
			onRed_lineY();
 8000fdc:	f000 fce2 	bl	80019a4 <onRed_lineY>
			//update _7SEG_buffer_lineY
			_7SEG_buffer_lineY[0] = time_red_lineY_temp/10;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2a      	ldr	r2, [pc, #168]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000fe6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fea:	1092      	asrs	r2, r2, #2
 8000fec:	17db      	asrs	r3, r3, #31
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8000ff2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_lineY[1] = time_red_lineY_temp%10;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <fsm_traffic_blink_lineY_run+0x22c>)
 8000ffa:	fb83 2301 	smull	r2, r3, r3, r1
 8000ffe:	109a      	asrs	r2, r3, #2
 8001000:	17cb      	asrs	r3, r1, #31
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	1aca      	subs	r2, r1, r3
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <fsm_traffic_blink_lineY_run+0x230>)
 8001010:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <fsm_traffic_blink_lineY_run+0x234>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d110      	bne.n	800103c <fsm_traffic_blink_lineY_run+0x1d8>
				time_red_lineY_temp--;
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 8001022:	6013      	str	r3, [r2, #0]
				if(time_red_lineY_temp == 0){
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <fsm_traffic_blink_lineY_run+0x1d0>
					time_red_lineY_temp = time_red_lineY;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <fsm_traffic_blink_lineY_run+0x244>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <fsm_traffic_blink_lineY_run+0x248>)
 8001032:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f000 fa94 	bl	8001564 <setTimer5>
			}

			if(timer2_flag == 1){
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <fsm_traffic_blink_lineY_run+0x238>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11a      	bne.n	800107a <fsm_traffic_blink_lineY_run+0x216>
				status_traffic_blink_lineY = green_lineY;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <fsm_traffic_blink_lineY_run+0x21c>)
 8001046:	2219      	movs	r2, #25
 8001048:	601a      	str	r2, [r3, #0]
				traffic_buffer_lineY[0] = time_green_lineY*1000;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <fsm_traffic_blink_lineY_run+0x220>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 8001058:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_lineY[0]);
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <fsm_traffic_blink_lineY_run+0x224>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fa32 	bl	80014c8 <setTimer2>
				setTimer5(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f000 fa7c 	bl	8001564 <setTimer5>
			}
			break;
 800106c:	e005      	b.n	800107a <fsm_traffic_blink_lineY_run+0x216>
		default:
			break;
 800106e:	bf00      	nop
 8001070:	e004      	b.n	800107c <fsm_traffic_blink_lineY_run+0x218>
			break;
 8001072:	bf00      	nop
 8001074:	e002      	b.n	800107c <fsm_traffic_blink_lineY_run+0x218>
			break;
 8001076:	bf00      	nop
 8001078:	e000      	b.n	800107c <fsm_traffic_blink_lineY_run+0x218>
			break;
 800107a:	bf00      	nop
	}
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000003c 	.word	0x2000003c
 8001084:	20000060 	.word	0x20000060
 8001088:	20000118 	.word	0x20000118
 800108c:	2000006c 	.word	0x2000006c
 8001090:	66666667 	.word	0x66666667
 8001094:	2000012c 	.word	0x2000012c
 8001098:	200000dc 	.word	0x200000dc
 800109c:	200000c4 	.word	0x200000c4
 80010a0:	20000064 	.word	0x20000064
 80010a4:	20000070 	.word	0x20000070
 80010a8:	20000068 	.word	0x20000068
 80010ac:	20000074 	.word	0x20000074

080010b0 <fsm_traffic_lineX_run>:
#include "traffic.h"

int status_traffic_lineX = display_traffic_lineX;


void fsm_traffic_lineX_run(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	switch(status_traffic_lineX){
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <fsm_traffic_lineX_run+0x8c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3b05      	subs	r3, #5
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d834      	bhi.n	8001128 <fsm_traffic_lineX_run+0x78>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <fsm_traffic_lineX_run+0x14>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	080010d5 	.word	0x080010d5
 80010c8:	080010db 	.word	0x080010db
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	0800110f 	.word	0x0800110f

		//normal mode (mode 1)
		case display_traffic_lineX:
			fsm_traffic_blink_lineX_run();
 80010d4:	f7ff fda0 	bl	8000c18 <fsm_traffic_blink_lineX_run>
			break;
 80010d8:	e02d      	b.n	8001136 <fsm_traffic_lineX_run+0x86>

		//mode 2
		case modifying_led_red_lineX:
			// turn off led green and yellow
			offGreenYellow_lineX();
 80010da:	f000 fcf7 	bl	8001acc <offGreenYellow_lineX>
			if(timer8_flag == 1){
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <fsm_traffic_lineX_run+0x90>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d122      	bne.n	800112c <fsm_traffic_lineX_run+0x7c>
				//toggle led red with frequency 2Hz
				toggleRed_lineX();
 80010e6:	f000 fcaf 	bl	8001a48 <toggleRed_lineX>
				setTimer8(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ee:	f000 fa87 	bl	8001600 <setTimer8>
			}
			break;
 80010f2:	e01b      	b.n	800112c <fsm_traffic_lineX_run+0x7c>

		//mode 3
		case modifying_led_yellow_lineX:
			offGreenRed_lineX();
 80010f4:	f000 fcfa 	bl	8001aec <offGreenRed_lineX>
			if(timer8_flag == 1){
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <fsm_traffic_lineX_run+0x90>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d117      	bne.n	8001130 <fsm_traffic_lineX_run+0x80>
				toggleYellow_lineX();
 8001100:	f000 fcb6 	bl	8001a70 <toggleYellow_lineX>
				setTimer8(500);
 8001104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001108:	f000 fa7a 	bl	8001600 <setTimer8>
			}
			break;
 800110c:	e010      	b.n	8001130 <fsm_traffic_lineX_run+0x80>

		//mode 4
		case modifying_led_green_lineX:
			offRedYellow_lineX();
 800110e:	f000 fcfd 	bl	8001b0c <offRedYellow_lineX>
			if(timer8_flag == 1){
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <fsm_traffic_lineX_run+0x90>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10c      	bne.n	8001134 <fsm_traffic_lineX_run+0x84>
				toggleGreen_lineX();
 800111a:	f000 fc9f 	bl	8001a5c <toggleGreen_lineX>
				setTimer8(500);
 800111e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001122:	f000 fa6d 	bl	8001600 <setTimer8>
			}
			break;
 8001126:	e005      	b.n	8001134 <fsm_traffic_lineX_run+0x84>
		default:
			break;
 8001128:	bf00      	nop
 800112a:	e004      	b.n	8001136 <fsm_traffic_lineX_run+0x86>
			break;
 800112c:	bf00      	nop
 800112e:	e002      	b.n	8001136 <fsm_traffic_lineX_run+0x86>
			break;
 8001130:	bf00      	nop
 8001132:	e000      	b.n	8001136 <fsm_traffic_lineX_run+0x86>
			break;
 8001134:	bf00      	nop
	}
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000040 	.word	0x20000040
 8001140:	200000f4 	.word	0x200000f4

08001144 <fsm_traffic_lineY_run>:
#include "software_timer.h"
#include "traffic.h"

int status_traffic_lineY = display_traffic_lineY;

void fsm_traffic_lineY_run(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	switch(status_traffic_lineY){
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <fsm_traffic_lineY_run+0xdc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b09      	subs	r3, #9
 800114e:	2b17      	cmp	r3, #23
 8001150:	d85c      	bhi.n	800120c <fsm_traffic_lineY_run+0xc8>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <fsm_traffic_lineY_run+0x14>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011b9 	.word	0x080011b9
 800115c:	0800120d 	.word	0x0800120d
 8001160:	0800120d 	.word	0x0800120d
 8001164:	0800120d 	.word	0x0800120d
 8001168:	0800120d 	.word	0x0800120d
 800116c:	0800120d 	.word	0x0800120d
 8001170:	0800120d 	.word	0x0800120d
 8001174:	0800120d 	.word	0x0800120d
 8001178:	0800120d 	.word	0x0800120d
 800117c:	0800120d 	.word	0x0800120d
 8001180:	0800120d 	.word	0x0800120d
 8001184:	0800120d 	.word	0x0800120d
 8001188:	0800120d 	.word	0x0800120d
 800118c:	0800120d 	.word	0x0800120d
 8001190:	0800120d 	.word	0x0800120d
 8001194:	0800120d 	.word	0x0800120d
 8001198:	0800120d 	.word	0x0800120d
 800119c:	0800120d 	.word	0x0800120d
 80011a0:	0800120d 	.word	0x0800120d
 80011a4:	0800120d 	.word	0x0800120d
 80011a8:	0800120d 	.word	0x0800120d
 80011ac:	080011bf 	.word	0x080011bf
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	080011f3 	.word	0x080011f3

		//normal mode (mode 1)
		case display_traffic_lineY:
			fsm_traffic_blink_lineY_run();
 80011b8:	f7ff fe54 	bl	8000e64 <fsm_traffic_blink_lineY_run>
			break;
 80011bc:	e02d      	b.n	800121a <fsm_traffic_lineY_run+0xd6>

		//mode 2
		case modifying_led_red_lineY:
			offGreenYellow_lineY();
 80011be:	f000 fcb5 	bl	8001b2c <offGreenYellow_lineY>
			if(timer7_flag == 1){
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <fsm_traffic_lineY_run+0xe0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d122      	bne.n	8001210 <fsm_traffic_lineY_run+0xcc>
				toggleRed_lineY();
 80011ca:	f000 fc5b 	bl	8001a84 <toggleRed_lineY>
				setTimer7(500);
 80011ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d2:	f000 f9fb 	bl	80015cc <setTimer7>
			}
			break;
 80011d6:	e01b      	b.n	8001210 <fsm_traffic_lineY_run+0xcc>

		//mode 3
		case modifying_led_yellow_lineY:
			offGreenRed_lineY();
 80011d8:	f000 fcba 	bl	8001b50 <offGreenRed_lineY>
			if(timer7_flag == 1){
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <fsm_traffic_lineY_run+0xe0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d117      	bne.n	8001214 <fsm_traffic_lineY_run+0xd0>
				toggleYellow_lineY();
 80011e4:	f000 fc66 	bl	8001ab4 <toggleYellow_lineY>
				setTimer7(500);
 80011e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ec:	f000 f9ee 	bl	80015cc <setTimer7>
			}
			break;
 80011f0:	e010      	b.n	8001214 <fsm_traffic_lineY_run+0xd0>

		//mode 4
		case modifying_led_green_lineY:
			// turn off red and yellow led
			offRedYellow_lineY();
 80011f2:	f000 fcbf 	bl	8001b74 <offRedYellow_lineY>
			if(timer7_flag == 1){
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <fsm_traffic_lineY_run+0xe0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d10c      	bne.n	8001218 <fsm_traffic_lineY_run+0xd4>
				//toggle green led with frequency 2Hz
				toggleGreen_lineY();
 80011fe:	f000 fc4d 	bl	8001a9c <toggleGreen_lineY>
				setTimer7(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f000 f9e1 	bl	80015cc <setTimer7>
			}
			break;
 800120a:	e005      	b.n	8001218 <fsm_traffic_lineY_run+0xd4>
		default:
			break;
 800120c:	bf00      	nop
 800120e:	e004      	b.n	800121a <fsm_traffic_lineY_run+0xd6>
			break;
 8001210:	bf00      	nop
 8001212:	e002      	b.n	800121a <fsm_traffic_lineY_run+0xd6>
			break;
 8001214:	bf00      	nop
 8001216:	e000      	b.n	800121a <fsm_traffic_lineY_run+0xd6>
			break;
 8001218:	bf00      	nop
	}
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000044 	.word	0x20000044
 8001224:	200000ec 	.word	0x200000ec

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f000 fcda 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f832 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001234:	f000 f8b8 	bl	80013a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001238:	f000 f86a 	bl	8001310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <main+0x68>)
 800123e:	f001 fc2f 	bl	8002aa0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer4(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f000 f974 	bl	8001530 <setTimer4>
  setTimer6(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f000 f9a5 	bl	8001598 <setTimer6>
  setTimer7(500);// toggle led-red lineY road 2Hz
 800124e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001252:	f000 f9bb 	bl	80015cc <setTimer7>
  setTimer8(500);// toggle led-red horizontal road 2Hz
 8001256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800125a:	f000 f9d1 	bl	8001600 <setTimer8>
  setTimer10(500);// timer blink led-red for debugging
 800125e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001262:	f000 f9e7 	bl	8001634 <setTimer10>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //blink led-red for debugging
	  if(timer10_flag == 1){
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <main+0x6c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d105      	bne.n	800127a <main+0x52>
		  toggleLedRed();
 800126e:	f000 fbe1 	bl	8001a34 <toggleLedRed>
		  setTimer10(500);
 8001272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001276:	f000 f9dd 	bl	8001634 <setTimer10>
	  }

	  fsm_system_run();
 800127a:	f7ff fb5d 	bl	8000938 <fsm_system_run>
	  fsm_7SEG_lineY_run();
 800127e:	f7ff fb19 	bl	80008b4 <fsm_7SEG_lineY_run>
	  fsm_7SEG_lineX_run();
 8001282:	f7ff fa83 	bl	800078c <fsm_7SEG_lineX_run>
	  fsm_traffic_lineY_run();
 8001286:	f7ff ff5d 	bl	8001144 <fsm_traffic_lineY_run>
	  fsm_traffic_lineX_run();
 800128a:	f7ff ff11 	bl	80010b0 <fsm_traffic_lineX_run>
	  if(timer10_flag == 1){
 800128e:	e7ea      	b.n	8001266 <main+0x3e>
 8001290:	20000134 	.word	0x20000134
 8001294:	20000104 	.word	0x20000104

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	; 0x40
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2228      	movs	r2, #40	; 0x28
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 ffb6 	bl	8003218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012be:	2301      	movs	r3, #1
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c2:	2310      	movs	r3, #16
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 ffba 	bl	8002248 <HAL_RCC_OscConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012da:	f000 f8d5 	bl	8001488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012de:	230f      	movs	r3, #15
 80012e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fa26 	bl	8002748 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001302:	f000 f8c1 	bl	8001488 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3740      	adds	r7, #64	; 0x40
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM2_Init+0x94>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM2_Init+0x94>)
 8001336:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800133a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_TIM2_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM2_Init+0x94>)
 8001344:	2209      	movs	r2, #9
 8001346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM2_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM2_Init+0x94>)
 8001356:	f001 fb53 	bl	8002a00 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001360:	f000 f892 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM2_Init+0x94>)
 8001372:	f001 fce9 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800137c:	f000 f884 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM2_Init+0x94>)
 800138e:	f001 feb5 	bl	80030fc <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001398:	f000 f876 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000134 	.word	0x20000134

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_GPIO_Init+0xbc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|a2_Pin|REDA_Pin|GREENA_Pin
 80013ec:	2200      	movs	r2, #0
 80013ee:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <MX_GPIO_Init+0xc0>)
 80013f4:	f000 fef7 	bl	80021e6 <HAL_GPIO_WritePin>
                          |YELLOWA_Pin|REDB_Pin|GREENB_Pin|YELLOWB_Pin
                          |b2_Pin|c2_Pin|d2_Pin|e2_Pin
                          |f2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|EN1_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 80013fe:	481b      	ldr	r0, [pc, #108]	; (800146c <MX_GPIO_Init+0xc4>)
 8001400:	f000 fef1 	bl	80021e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin a2_Pin REDA_Pin GREENA_Pin
                           YELLOWA_Pin REDB_Pin GREENB_Pin YELLOWB_Pin
                           b2_Pin c2_Pin d2_Pin e2_Pin
                           f2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|a2_Pin|REDA_Pin|GREENA_Pin
 8001404:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001408:	60bb      	str	r3, [r7, #8]
                          |YELLOWA_Pin|REDB_Pin|GREENB_Pin|YELLOWB_Pin
                          |b2_Pin|c2_Pin|d2_Pin|e2_Pin
                          |f2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0xc0>)
 800141e:	f000 fd51 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN0_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin g2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|EN1_Pin
 8001422:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001426:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN0_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|g2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0xc4>)
 800143c:	f000 fd42 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN1_Pin|BTN2_Pin;
 8001440:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_GPIO_Init+0xc4>)
 8001456:	f000 fd35 	bl	8001ec4 <HAL_GPIO_Init>

}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00

08001470 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	timerRun();
 8001478:	f000 f8f6 	bl	8001668 <timerRun>
	getKeyInput();
 800147c:	f7fe fe9c 	bl	80001b8 <getKeyInput>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <setTimer1>:

int timer10_flag = 0;
int timer10_counter = 0;

//timer for update clockbuffer
void setTimer1(int duration){
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <setTimer1+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <setTimer1+0x2c>)
 80014a8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <setTimer1+0x30>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000078 	.word	0x20000078
 80014c0:	200000c0 	.word	0x200000c0
 80014c4:	200000bc 	.word	0x200000bc

080014c8 <setTimer2>:

//timer for update 7SEG led
void setTimer2(int duration){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <setTimer2+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014da:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <setTimer2+0x2c>)
 80014dc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <setTimer2+0x30>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000078 	.word	0x20000078
 80014f4:	200000c8 	.word	0x200000c8
 80014f8:	200000c4 	.word	0x200000c4

080014fc <setTimer3>:

//timer for control LED-RED and DOT-LED
void setTimer3(int duration){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <setTimer3+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	fb92 f3f3 	sdiv	r3, r2, r3
 800150e:	4a06      	ldr	r2, [pc, #24]	; (8001528 <setTimer3+0x2c>)
 8001510:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <setTimer3+0x30>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000078 	.word	0x20000078
 8001528:	200000d0 	.word	0x200000d0
 800152c:	200000cc 	.word	0x200000cc

08001530 <setTimer4>:

//timer for update led matrix
void setTimer4(int duration){
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <setTimer4+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <setTimer4+0x2c>)
 8001544:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <setTimer4+0x30>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000078 	.word	0x20000078
 800155c:	200000d8 	.word	0x200000d8
 8001560:	200000d4 	.word	0x200000d4

08001564 <setTimer5>:

//timer for update buffer led matrix
void setTimer5(int duration){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <setTimer5+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	fb92 f3f3 	sdiv	r3, r2, r3
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <setTimer5+0x2c>)
 8001578:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <setTimer5+0x30>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000078 	.word	0x20000078
 8001590:	200000e0 	.word	0x200000e0
 8001594:	200000dc 	.word	0x200000dc

08001598 <setTimer6>:

void setTimer6(int duration){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <setTimer6+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <setTimer6+0x2c>)
 80015ac:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <setTimer6+0x30>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000078 	.word	0x20000078
 80015c4:	200000e8 	.word	0x200000e8
 80015c8:	200000e4 	.word	0x200000e4

080015cc <setTimer7>:

void setTimer7(int duration){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <setTimer7+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	fb92 f3f3 	sdiv	r3, r2, r3
 80015de:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <setTimer7+0x2c>)
 80015e0:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <setTimer7+0x30>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000078 	.word	0x20000078
 80015f8:	200000f0 	.word	0x200000f0
 80015fc:	200000ec 	.word	0x200000ec

08001600 <setTimer8>:

void setTimer8(int duration){
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <setTimer8+0x28>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <setTimer8+0x2c>)
 8001614:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <setTimer8+0x30>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000078 	.word	0x20000078
 800162c:	200000f8 	.word	0x200000f8
 8001630:	200000f4 	.word	0x200000f4

08001634 <setTimer10>:
void setTimer9(int duration){
	timer9_counter = duration/TICK;
	timer9_flag = 0;
}

void setTimer10(int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <setTimer10+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fb92 f3f3 	sdiv	r3, r2, r3
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <setTimer10+0x2c>)
 8001648:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <setTimer10+0x30>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000078 	.word	0x20000078
 8001660:	20000108 	.word	0x20000108
 8001664:	20000104 	.word	0x20000104

08001668 <timerRun>:

void timerRun(){
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <timerRun+0x14c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	dd04      	ble.n	800167e <timerRun+0x16>
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <timerRun+0x14c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <timerRun+0x14c>)
 800167c:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <timerRun+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <timerRun+0x24>
		timer1_flag = 1;
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <timerRun+0x150>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <timerRun+0x154>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	dd04      	ble.n	800169e <timerRun+0x36>
 8001694:	4b49      	ldr	r3, [pc, #292]	; (80017bc <timerRun+0x154>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a48      	ldr	r2, [pc, #288]	; (80017bc <timerRun+0x154>)
 800169c:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <timerRun+0x154>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <timerRun+0x44>
		timer2_flag = 1;
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <timerRun+0x158>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 80016ac:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <timerRun+0x15c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dd04      	ble.n	80016be <timerRun+0x56>
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <timerRun+0x15c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <timerRun+0x15c>)
 80016bc:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <timerRun+0x15c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <timerRun+0x64>
		timer3_flag = 1;
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <timerRun+0x160>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <timerRun+0x164>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dd04      	ble.n	80016de <timerRun+0x76>
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <timerRun+0x164>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3b01      	subs	r3, #1
 80016da:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <timerRun+0x164>)
 80016dc:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <timerRun+0x164>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <timerRun+0x84>
		timer4_flag = 1;
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <timerRun+0x168>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <timerRun+0x16c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	dd04      	ble.n	80016fe <timerRun+0x96>
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <timerRun+0x16c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <timerRun+0x16c>)
 80016fc:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <timerRun+0x16c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <timerRun+0xa4>
		timer5_flag = 1;
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <timerRun+0x170>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 800170c:	4b33      	ldr	r3, [pc, #204]	; (80017dc <timerRun+0x174>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dd04      	ble.n	800171e <timerRun+0xb6>
 8001714:	4b31      	ldr	r3, [pc, #196]	; (80017dc <timerRun+0x174>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a30      	ldr	r2, [pc, #192]	; (80017dc <timerRun+0x174>)
 800171c:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <timerRun+0x174>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <timerRun+0xc4>
		timer6_flag = 1;
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <timerRun+0x178>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <timerRun+0x17c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	dd04      	ble.n	800173e <timerRun+0xd6>
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <timerRun+0x17c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <timerRun+0x17c>)
 800173c:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <timerRun+0x17c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <timerRun+0xe4>
		timer7_flag = 1;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <timerRun+0x180>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <timerRun+0x184>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd04      	ble.n	800175e <timerRun+0xf6>
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <timerRun+0x184>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <timerRun+0x184>)
 800175c:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <timerRun+0x184>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <timerRun+0x104>
		timer8_flag = 1;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <timerRun+0x188>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <timerRun+0x18c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	dd04      	ble.n	800177e <timerRun+0x116>
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <timerRun+0x18c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <timerRun+0x18c>)
 800177c:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <timerRun+0x18c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <timerRun+0x124>
		timer9_flag = 1;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <timerRun+0x190>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <timerRun+0x194>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd04      	ble.n	800179e <timerRun+0x136>
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <timerRun+0x194>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <timerRun+0x194>)
 800179c:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <timerRun+0x194>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <timerRun+0x144>
		timer10_flag = 1;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <timerRun+0x198>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
	}
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	200000c0 	.word	0x200000c0
 80017b8:	200000bc 	.word	0x200000bc
 80017bc:	200000c8 	.word	0x200000c8
 80017c0:	200000c4 	.word	0x200000c4
 80017c4:	200000d0 	.word	0x200000d0
 80017c8:	200000cc 	.word	0x200000cc
 80017cc:	200000d8 	.word	0x200000d8
 80017d0:	200000d4 	.word	0x200000d4
 80017d4:	200000e0 	.word	0x200000e0
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	200000e8 	.word	0x200000e8
 80017e0:	200000e4 	.word	0x200000e4
 80017e4:	200000f0 	.word	0x200000f0
 80017e8:	200000ec 	.word	0x200000ec
 80017ec:	200000f8 	.word	0x200000f8
 80017f0:	200000f4 	.word	0x200000f4
 80017f4:	20000100 	.word	0x20000100
 80017f8:	200000fc 	.word	0x200000fc
 80017fc:	20000108 	.word	0x20000108
 8001800:	20000104 	.word	0x20000104

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_MspInit+0x5c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_MspInit+0x5c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x5c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x5c>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_MspInit+0x60>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_MspInit+0x60>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d113      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	201c      	movs	r0, #28
 8001898:	f000 fadd 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189c:	201c      	movs	r0, #28
 800189e:	f000 faf6 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f9bb 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f001 f917 	bl	8002b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000134 	.word	0x20000134

08001914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <onRed_lineX>:
#define SRC_TRAFFIC_C_

#include "traffic.h"
#include "main.h"

void onRed_lineX(){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2120      	movs	r1, #32
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <onRed_lineX+0x28>)
 800192a:	f000 fc5c 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <onRed_lineX+0x28>)
 8001934:	f000 fc57 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <onRed_lineX+0x28>)
 800193e:	f000 fc52 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40010800 	.word	0x40010800

0800194c <onGreen_lineX>:

void onGreen_lineX(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2120      	movs	r1, #32
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <onGreen_lineX+0x28>)
 8001956:	f000 fc46 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <onGreen_lineX+0x28>)
 8001960:	f000 fc41 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2140      	movs	r1, #64	; 0x40
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <onGreen_lineX+0x28>)
 800196a:	f000 fc3c 	bl	80021e6 <HAL_GPIO_WritePin>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40010800 	.word	0x40010800

08001978 <onYellow_lineX>:

void onYellow_lineX(){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2120      	movs	r1, #32
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <onYellow_lineX+0x28>)
 8001982:	f000 fc30 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, SET);
 8001986:	2201      	movs	r2, #1
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <onYellow_lineX+0x28>)
 800198c:	f000 fc2b 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <onYellow_lineX+0x28>)
 8001996:	f000 fc26 	bl	80021e6 <HAL_GPIO_WritePin>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40010800 	.word	0x40010800

080019a4 <onRed_lineY>:

void onRed_lineY(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <onRed_lineY+0x2c>)
 80019b0:	f000 fc19 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <onRed_lineY+0x2c>)
 80019bc:	f000 fc13 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <onRed_lineY+0x2c>)
 80019c8:	f000 fc0d 	bl	80021e6 <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010800 	.word	0x40010800

080019d4 <onGreen_lineY>:

void onGreen_lineY(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019de:	4808      	ldr	r0, [pc, #32]	; (8001a00 <onGreen_lineY+0x2c>)
 80019e0:	f000 fc01 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <onGreen_lineY+0x2c>)
 80019ec:	f000 fbfb 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f6:	4802      	ldr	r0, [pc, #8]	; (8001a00 <onGreen_lineY+0x2c>)
 80019f8:	f000 fbf5 	bl	80021e6 <HAL_GPIO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010800 	.word	0x40010800

08001a04 <onYellow_lineY>:

void onYellow_lineY(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4808      	ldr	r0, [pc, #32]	; (8001a30 <onYellow_lineY+0x2c>)
 8001a10:	f000 fbe9 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <onYellow_lineY+0x2c>)
 8001a1c:	f000 fbe3 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <onYellow_lineY+0x2c>)
 8001a28:	f000 fbdd 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010800 	.word	0x40010800

08001a34 <toggleLedRed>:



void toggleLedRed(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <toggleLedRed+0x10>)
 8001a3c:	f000 fbeb 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010800 	.word	0x40010800

08001a48 <toggleRed_lineX>:

void toggleRed_lineX(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	4802      	ldr	r0, [pc, #8]	; (8001a58 <toggleRed_lineX+0x10>)
 8001a50:	f000 fbe1 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40010800 	.word	0x40010800

08001a5c <toggleGreen_lineX>:

void toggleGreen_lineX(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <toggleGreen_lineX+0x10>)
 8001a64:	f000 fbd7 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010800 	.word	0x40010800

08001a70 <toggleYellow_lineX>:

void toggleYellow_lineX(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <toggleYellow_lineX+0x10>)
 8001a78:	f000 fbcd 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010800 	.word	0x40010800

08001a84 <toggleRed_lineY>:

void toggleRed_lineY(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
 8001a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <toggleRed_lineY+0x14>)
 8001a8e:	f000 fbc2 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40010800 	.word	0x40010800

08001a9c <toggleGreen_lineY>:

void toggleGreen_lineY(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
 8001aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <toggleGreen_lineY+0x14>)
 8001aa6:	f000 fbb6 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <toggleYellow_lineY>:

void toggleYellow_lineY(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
 8001ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <toggleYellow_lineY+0x14>)
 8001abe:	f000 fbaa 	bl	8002216 <HAL_GPIO_TogglePin>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40010800 	.word	0x40010800

08001acc <offGreenYellow_lineX>:
void offAllLed_lineX(){
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, RESET);
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, RESET);
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, RESET);
}
void offGreenYellow_lineX(){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <offGreenYellow_lineX+0x1c>)
 8001ad6:	f000 fb86 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2140      	movs	r1, #64	; 0x40
 8001ade:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <offGreenYellow_lineX+0x1c>)
 8001ae0:	f000 fb81 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010800 	.word	0x40010800

08001aec <offGreenRed_lineX>:
void offGreenRed_lineX(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2120      	movs	r1, #32
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <offGreenRed_lineX+0x1c>)
 8001af6:	f000 fb76 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <offGreenRed_lineX+0x1c>)
 8001b00:	f000 fb71 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40010800 	.word	0x40010800

08001b0c <offRedYellow_lineX>:
void offRedYellow_lineX(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <offRedYellow_lineX+0x1c>)
 8001b16:	f000 fb66 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <offRedYellow_lineX+0x1c>)
 8001b20:	f000 fb61 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010800 	.word	0x40010800

08001b2c <offGreenYellow_lineY>:
void offAllLed_lineY(){
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, RESET);
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, RESET);
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, RESET);
}
void offGreenYellow_lineY(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <offGreenYellow_lineY+0x20>)
 8001b38:	f000 fb55 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b42:	4802      	ldr	r0, [pc, #8]	; (8001b4c <offGreenYellow_lineY+0x20>)
 8001b44:	f000 fb4f 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40010800 	.word	0x40010800

08001b50 <offGreenRed_lineY>:
void offGreenRed_lineY(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <offGreenRed_lineY+0x20>)
 8001b5c:	f000 fb43 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b66:	4802      	ldr	r0, [pc, #8]	; (8001b70 <offGreenRed_lineY+0x20>)
 8001b68:	f000 fb3d 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40010800 	.word	0x40010800

08001b74 <offRedYellow_lineY>:
void offRedYellow_lineY(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <offRedYellow_lineY+0x20>)
 8001b80:	f000 fb31 	bl	80021e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <offRedYellow_lineY+0x20>)
 8001b8c:	f000 fb2b 	bl	80021e6 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010800 	.word	0x40010800

08001b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff febc 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb4:	4c09      	ldr	r4, [pc, #36]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f001 fb05 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc6:	f7ff fb2f 	bl	8001228 <main>
  bx lr
 8001bca:	4770      	bx	lr
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bd4:	0800326c 	.word	0x0800326c
  ldr r2, =_sbss
 8001bd8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001bdc:	20000180 	.word	0x20000180

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f923 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fe00 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f93b 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f903 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000007c 	.word	0x2000007c
 8001c68:	20000084 	.word	0x20000084
 8001c6c:	20000080 	.word	0x20000080

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x20>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000084 	.word	0x20000084
 8001c90:	2000017c 	.word	0x2000017c

08001c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_GetTick+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	2000017c 	.word	0x2000017c

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4906      	ldr	r1, [pc, #24]	; (8001d40 <__NVIC_EnableIRQ+0x34>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff90 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff2d 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff42 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff90 	bl	8001d98 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5f 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff35 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e148      	b.n	800216a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8137 	bne.w	8002164 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4aa3      	ldr	r2, [pc, #652]	; (8002188 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f00:	4aa1      	ldr	r2, [pc, #644]	; (8002188 <HAL_GPIO_Init+0x2c4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d875      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f06:	4aa1      	ldr	r2, [pc, #644]	; (800218c <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d058      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f0c:	4a9f      	ldr	r2, [pc, #636]	; (800218c <HAL_GPIO_Init+0x2c8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d86f      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f12:	4a9f      	ldr	r2, [pc, #636]	; (8002190 <HAL_GPIO_Init+0x2cc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d052      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f18:	4a9d      	ldr	r2, [pc, #628]	; (8002190 <HAL_GPIO_Init+0x2cc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d869      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a9d      	ldr	r2, [pc, #628]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04c      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f24:	4a9b      	ldr	r2, [pc, #620]	; (8002194 <HAL_GPIO_Init+0x2d0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d863      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a9b      	ldr	r2, [pc, #620]	; (8002198 <HAL_GPIO_Init+0x2d4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d046      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f30:	4a99      	ldr	r2, [pc, #612]	; (8002198 <HAL_GPIO_Init+0x2d4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d85d      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d82a      	bhi.n	8001f90 <HAL_GPIO_Init+0xcc>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d859      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_GPIO_Init+0x80>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fab 	.word	0x08001fab
 8001f50:	08001fed 	.word	0x08001fed
 8001f54:	08001ff3 	.word	0x08001ff3
 8001f58:	08001ff3 	.word	0x08001ff3
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08001ff3 	.word	0x08001ff3
 8001f64:	08001ff3 	.word	0x08001ff3
 8001f68:	08001ff3 	.word	0x08001ff3
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001ff3 	.word	0x08001ff3
 8001f74:	08001ff3 	.word	0x08001ff3
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08001ff3 	.word	0x08001ff3
 8001f84:	08001ff3 	.word	0x08001ff3
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	4a82      	ldr	r2, [pc, #520]	; (800219c <HAL_GPIO_Init+0x2d8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e02c      	b.n	8001ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e029      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e024      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e01f      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e013      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]
          break;
 8001fde:	e009      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	615a      	str	r2, [r3, #20]
          break;
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          break;
 8001ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d801      	bhi.n	8001ffe <HAL_GPIO_Init+0x13a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_Init+0x13e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d802      	bhi.n	8002010 <HAL_GPIO_Init+0x14c>
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x152>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3b08      	subs	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	210f      	movs	r1, #15
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8090 	beq.w	8002164 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4b56      	ldr	r3, [pc, #344]	; (80021a0 <HAL_GPIO_Init+0x2dc>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a55      	ldr	r2, [pc, #340]	; (80021a0 <HAL_GPIO_Init+0x2dc>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_GPIO_Init+0x2dc>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x2e0>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a49      	ldr	r2, [pc, #292]	; (80021a8 <HAL_GPIO_Init+0x2e4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1e0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a48      	ldr	r2, [pc, #288]	; (80021ac <HAL_GPIO_Init+0x2e8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1dc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a47      	ldr	r2, [pc, #284]	; (80021b0 <HAL_GPIO_Init+0x2ec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1d8>
 8002098:	2302      	movs	r3, #2
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 800209c:	2303      	movs	r3, #3
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 80020a4:	2300      	movs	r3, #0
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b6:	493b      	ldr	r1, [pc, #236]	; (80021a4 <HAL_GPIO_Init+0x2e0>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4933      	ldr	r1, [pc, #204]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	492d      	ldr	r1, [pc, #180]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	4929      	ldr	r1, [pc, #164]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002110:	4013      	ands	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4923      	ldr	r1, [pc, #140]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	491f      	ldr	r1, [pc, #124]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002138:	4013      	ands	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4919      	ldr	r1, [pc, #100]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	4915      	ldr	r1, [pc, #84]	; (80021b4 <HAL_GPIO_Init+0x2f0>)
 8002160:	4013      	ands	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f aeaf 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	372c      	adds	r7, #44	; 0x2c
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	10320000 	.word	0x10320000
 800218c:	10310000 	.word	0x10310000
 8002190:	10220000 	.word	0x10220000
 8002194:	10210000 	.word	0x10210000
 8002198:	10120000 	.word	0x10120000
 800219c:	10110000 	.word	0x10110000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40010c00 	.word	0x40010c00
 80021b0:	40011000 	.word	0x40011000
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e001      	b.n	80021da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	807b      	strh	r3, [r7, #2]
 80021f2:	4613      	mov	r3, r2
 80021f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f6:	787b      	ldrb	r3, [r7, #1]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002202:	e003      	b.n	800220c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002228:	887a      	ldrh	r2, [r7, #2]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	041a      	lsls	r2, r3, #16
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43d9      	mvns	r1, r3
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	400b      	ands	r3, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e26c      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00c      	beq.n	800228e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d112      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d10b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06c      	beq.n	8002374 <HAL_RCC_OscConfig+0x12c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d168      	bne.n	8002374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e246      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x76>
 80022b0:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e02e      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0xbc>
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a71      	ldr	r2, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fcb6 	bl	8001c94 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fcb2 	bl	8001c94 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1fa      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xe4>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fca2 	bl	8001c94 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fc9e 	bl	8001c94 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1e6      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x10c>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1ba      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fc57 	bl	8001c94 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fc53 	bl	8001c94 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e19b      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4927      	ldr	r1, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fc36 	bl	8001c94 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fc32 	bl	8001c94 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e17a      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03a      	beq.n	80024cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff fc16 	bl	8001c94 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fc12 	bl	8001c94 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e15a      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248a:	2001      	movs	r0, #1
 800248c:	f000 fa9a 	bl	80029c4 <RCC_Delay>
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7ff fbfc 	bl	8001c94 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00f      	b.n	80024c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff fbf8 	bl	8001c94 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e140      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420000 	.word	0x42420000
 80024bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b9e      	ldr	r3, [pc, #632]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e9      	bne.n	80024a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a6 	beq.w	8002626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b97      	ldr	r3, [pc, #604]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b94      	ldr	r3, [pc, #592]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a93      	ldr	r2, [pc, #588]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b8e      	ldr	r3, [pc, #568]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8a      	ldr	r2, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbb9 	bl	8001c94 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff fbb5 	bl	8001c94 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0fd      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a7a      	ldr	r2, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e02d      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x334>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a72      	ldr	r2, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x356>
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a6c      	ldr	r2, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a66      	ldr	r2, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a63      	ldr	r2, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fb69 	bl	8001c94 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff fb65 	bl	8001c94 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ab      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x37e>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff fb53 	bl	8001c94 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7ff fb4f 	bl	8001c94 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e095      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a47      	ldr	r2, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8081 	beq.w	8002732 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d061      	beq.n	8002700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d146      	bne.n	80026d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff fb23 	bl	8001c94 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff fb1f 	bl	8001c94 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e067      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a19      	ldr	r1, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	430b      	orrs	r3, r1
 800269e:	4927      	ldr	r1, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff faf3 	bl	8001c94 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff faef 	bl	8001c94 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e037      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
 80026d0:	e02f      	b.n	8002732 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fadc 	bl	8001c94 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fad8 	bl	8001c94 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x498>
 80026fe:	e018      	b.n	8002732 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e013      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x4f4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	42420060 	.word	0x42420060

08002748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0d0      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	4965      	ldr	r1, [pc, #404]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d040      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e073      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06b      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4936      	ldr	r1, [pc, #216]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7ff fa2c 	bl	8001c94 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff fa28 	bl	8001c94 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e053      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d210      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	4922      	ldr	r1, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f821 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	490a      	ldr	r1, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1cc>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1d0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f98a 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	08003240 	.word	0x08003240
 8002914:	2000007c 	.word	0x2000007c
 8002918:	20000080 	.word	0x20000080

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x30>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x36>
 800294a:	e027      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	613b      	str	r3, [r7, #16]
      break;
 8002950:	e027      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0c5b      	lsrs	r3, r3, #17
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	fb02 f203 	mul.w	r2, r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e004      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	e002      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800299e:	613b      	str	r3, [r7, #16]
      break;
 80029a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a2:	693b      	ldr	r3, [r7, #16]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	08003250 	.word	0x08003250
 80029bc:	08003260 	.word	0x08003260
 80029c0:	003d0900 	.word	0x003d0900

080029c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCC_Delay+0x34>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <RCC_Delay+0x38>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0a5b      	lsrs	r3, r3, #9
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e0:	bf00      	nop
  }
  while (Delay --);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	60fa      	str	r2, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <RCC_Delay+0x1c>
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	2000007c 	.word	0x2000007c
 80029fc:	10624dd3 	.word	0x10624dd3

08002a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe ff1e 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fa6e 	bl	8002f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e035      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_TIM_Base_Start_IT+0x90>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_TIM_Base_Start_IT+0x4e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d004      	beq.n	8002aee <HAL_TIM_Base_Start_IT+0x4e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <HAL_TIM_Base_Start_IT+0x94>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d010      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	e007      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400

08002b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0202 	mvn.w	r2, #2
 8002b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9b4 	bl	8002ee8 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9a7 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f9b6 	bl	8002efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0204 	mvn.w	r2, #4
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f98a 	bl	8002ee8 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f97d 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f98c 	bl	8002efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0208 	mvn.w	r2, #8
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2204      	movs	r2, #4
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f960 	bl	8002ee8 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f953 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f962 	bl	8002efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0210 	mvn.w	r2, #16
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2208      	movs	r2, #8
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f936 	bl	8002ee8 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f929 	bl	8002ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f938 	bl	8002efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0201 	mvn.w	r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe fbda 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa6b 	bl	80031be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d10e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d107      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8fc 	bl	8002f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0220 	mvn.w	r2, #32
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa36 	bl	80031ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIM_ConfigClockSource+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0b4      	b.n	8002ece <HAL_TIM_ConfigClockSource+0x186>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9c:	d03e      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0xd4>
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da2:	f200 8087 	bhi.w	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	f000 8086 	beq.w	8002eba <HAL_TIM_ConfigClockSource+0x172>
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d87f      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b70      	cmp	r3, #112	; 0x70
 8002db6:	d01a      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xa6>
 8002db8:	2b70      	cmp	r3, #112	; 0x70
 8002dba:	d87b      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b60      	cmp	r3, #96	; 0x60
 8002dbe:	d050      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x11a>
 8002dc0:	2b60      	cmp	r3, #96	; 0x60
 8002dc2:	d877      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b50      	cmp	r3, #80	; 0x50
 8002dc6:	d03c      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xfa>
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d873      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d058      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x13a>
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d86f      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d064      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8002dd8:	2b30      	cmp	r3, #48	; 0x30
 8002dda:	d86b      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d060      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d867      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d05a      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	e062      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f000 f95e 	bl	80030be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
      break;
 8002e1a:	e04f      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f000 f947 	bl	80030be <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3e:	609a      	str	r2, [r3, #8]
      break;
 8002e40:	e03c      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 f8be 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2150      	movs	r1, #80	; 0x50
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f915 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002e60:	e02c      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 f8dc 	bl	800302c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2160      	movs	r1, #96	; 0x60
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f905 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002e80:	e01c      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 f89e 	bl	8002fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f8f5 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e00c      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 f8ec 	bl	800308a <TIM_ITRx_SetConfig>
      break;
 8002eb2:	e003      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <TIM_Base_SetConfig+0xa8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x28>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x28>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <TIM_Base_SetConfig+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <TIM_Base_SetConfig+0xa8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0x52>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0x52>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <TIM_Base_SetConfig+0xac>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <TIM_Base_SetConfig+0xa8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400

08002fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 030a 	bic.w	r3, r3, #10
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0210 	bic.w	r2, r3, #16
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	031b      	lsls	r3, r3, #12
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f043 0307 	orr.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030be:	b480      	push	{r7}
 80030c0:	b087      	sub	sp, #28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	021a      	lsls	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	609a      	str	r2, [r3, #8]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003110:	2302      	movs	r3, #2
 8003112:	e041      	b.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d004      	beq.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10c      	bne.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400

080031ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	2600      	movs	r6, #0
 80031d4:	4d0c      	ldr	r5, [pc, #48]	; (8003208 <__libc_init_array+0x38>)
 80031d6:	4c0d      	ldr	r4, [pc, #52]	; (800320c <__libc_init_array+0x3c>)
 80031d8:	1b64      	subs	r4, r4, r5
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	f000 f822 	bl	8003228 <_init>
 80031e4:	2600      	movs	r6, #0
 80031e6:	4d0a      	ldr	r5, [pc, #40]	; (8003210 <__libc_init_array+0x40>)
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <__libc_init_array+0x44>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	08003264 	.word	0x08003264
 800320c:	08003264 	.word	0x08003264
 8003210:	08003264 	.word	0x08003264
 8003214:	08003268 	.word	0x08003268

08003218 <memset>:
 8003218:	4603      	mov	r3, r0
 800321a:	4402      	add	r2, r0
 800321c:	4293      	cmp	r3, r2
 800321e:	d100      	bne.n	8003222 <memset+0xa>
 8003220:	4770      	bx	lr
 8003222:	f803 1b01 	strb.w	r1, [r3], #1
 8003226:	e7f9      	b.n	800321c <memset+0x4>

08003228 <_init>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr

08003234 <_fini>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr
